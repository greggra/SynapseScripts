{
	"name": "spProfileTable",
	"properties": {
		"folder": {
			"name": "VirtualDW"
		},
		"content": {
			"query": "/*\nThis script is given \"As Is\" with no warranties and plenty of caveats. Use at your own risk!\nFor more on data profiling, see Chapter 10 in \"SQL Server 2012 Data Integration Recipes\", Apress, 2012\n*/-----------------------------------------------------------------------\n-- User-defined variables\n-----------------------------------------------------------------------\nUSE fno -- Your database here\nGO\nDECLARE @TABLE_SCHEMA NVARCHAR(128) = 'raw'  -- Your schema here\nDECLARE @TABLE_NAME NVARCHAR(128) = 'InventDim' -- Your table here\nDECLARE @ColumnListIN NVARCHAR(4000) = ''    -- Enter a comma-separated list of specific columns\n                                                     -- to profile, or leave blank for all\nDECLARE @TextCol BIT = 1  -- Analyse all text (char/varchar/nvarchar) data type columns\nDECLARE @NumCol BIT = 1   -- Analyse all numeric data type columns\nDECLARE @DateCol BIT = 1  -- Analyse all date data type data type columns\nDECLARE @LobCol BIT = 1   -- Analyse all VAR(char/nchar/binary) MAX data type columns (potentially time-consuming)\nDECLARE @AdvancedAnalysis BIT = 1 -- Perform advanced analysis (threshold counts/domain analysis) \n                                  --(potentially time-consuming)\nDECLARE @DistinctValuesMinimum INT = 200 -- Minimum number of distinct values to suggest a reference \n                                         -- table and/or perform domain analysis\nDECLARE @BoundaryPercent NUMERIC(3,2) = 0.57 -- Percent of records at upper/lower threshold to suggest\n                                             -- a possible anomaly\nDECLARE @NullBoundaryPercent NUMERIC(5,2) = 90.00 -- Percent of NULLs to suggest a possible anomaly\nDECLARE @DataTypePercentage INT = 2 -- Percentage variance allowed when suggesting another data type \n                                    -- for a column\n-----------------------------------------------------------------------\n-- Process variables\n-----------------------------------------------------------------------\nDECLARE @DATA_TYPE VARCHAR(128) = ''\nDECLARE @FULLSQL VARCHAR(MAX) = ''\nDECLARE @SQLMETADATA VARCHAR(MAX) = ''\nDECLARE @NUMSQL VARCHAR(MAX) = ''\nDECLARE @DATESQL VARCHAR(MAX) = ''\nDECLARE @LOBSQL VARCHAR(MAX) = ''\nDECLARE @COLUMN_NAME VARCHAR(128)\nDECLARE @CHARACTER_MAXIMUM_LENGTH INT\nDECLARE @ROWCOUNT BIGINT = 0\nDECLARE @ColumnList VARCHAR(4000) = ' '\nDECLARE @TableCheck TINYINT\nDECLARE @ColumnCheck SMALLINT\nDECLARE @DataTypeVariance INT\n-----------------------------------------------------------------------\n-- Start the process:\nBEGIN\nTRY\n-- Test that the schema and table exist\nSELECT\n @TableCheck = COUNT (*) \n   FROM INFORMATION_SCHEMA.TABLES \n   WHERE TABLE_SCHEMA = @TABLE_SCHEMA \n   AND TABLE_NAME = @TABLE_NAME\nIF @TableCheck <> 1\n BEGIN\n  RAISERROR ('The table does not exist',16,1)\n  RETURN\n END\n-----------------------------------------------------------------------\n-- Parse list of columns to process / get list of columns according to types required\n-----------------------------------------------------------------------\nIF OBJECT_ID('tempdb..#ColumnList') IS NOT NULL\n DROP TABLE tempdb..#ColumnList;\nCREATE TABLE #ColumnList (COLUMN_NAME VARCHAR(128), DATA_TYPE VARCHAR(128), CHARACTER_MAXIMUM_LENGTH INT) -- Used to hold list of columns to process\nIF @ColumnListIN <> '' -- See if there is a list of columns to process\nBEGIN\n -- Process list\n SET @ColumnList = @ColumnListIN + ','\n DECLARE @CharPosition int\n WHILE CHARINDEX(',', @ColumnList) > 0\n  BEGIN\n   SET @CharPosition = CHARINDEX(',', @ColumnList)\n   INSERT INTO #ColumnList (COLUMN_NAME) VALUES (LTRIM(RTRIM(LEFT(@ColumnList, @CharPosition - 1))))\n   SET @ColumnList = STUFF(@ColumnList, 1, @CharPosition, '')\n  END -- While loop\n-- update with datatype and length\n  UPDATE CL\n   SET CL.CHARACTER_MAXIMUM_LENGTH = ISNULL(ISC.CHARACTER_MAXIMUM_LENGTH,0)\n      ,CL.DATA_TYPE = ISC.DATA_TYPE\n   FROM #ColumnList CL\n   INNER JOIN INFORMATION_SCHEMA.COLUMNS ISC\n     ON CL.COLUMN_NAME = ISC.COLUMN_NAME\n  WHERE ISC.TABLE_NAME = @TABLE_NAME\n  AND ISC.TABLE_SCHEMA = @TABLE_SCHEMA\n END\n-- If test for list of column names\nELSE\n BEGIN\n -- Use all column names, to avoid filtering\n  IF @TextCol = 1\n   BEGIN\n    INSERT INTO #ColumnList (COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH)\n     SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS\n     WHERE DATA_TYPE IN ('varchar', 'nvarchar', 'char', 'nchar', 'binary')\n     AND TABLE_NAME = @TABLE_NAME\n     AND TABLE_SCHEMA = @TABLE_SCHEMA\n     AND CHARACTER_MAXIMUM_LENGTH > 0\n   END\n IF @NumCol = 1\n  BEGIN\n   INSERT INTO #ColumnList (COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH)\n   SELECT COLUMN_NAME, DATA_TYPE, ISNULL(CHARACTER_MAXIMUM_LENGTH,0) FROM INFORMATION_SCHEMA.COLUMNS\n   WHERE DATA_TYPE IN ('numeric', 'int', 'bigint', 'tinyint', 'smallint', 'decimal', 'money', 'smallmoney', 'float','real')\n   AND TABLE_NAME = @TABLE_NAME\n   AND TABLE_SCHEMA = @TABLE_SCHEMA\n  END\n IF @DateCol = 1\n  BEGIN\n   INSERT INTO #ColumnList (COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH)\n   SELECT COLUMN_NAME, DATA_TYPE, ISNULL(CHARACTER_MAXIMUM_LENGTH,0) FROM INFORMATION_SCHEMA.COLUMNS\n   WHERE DATA_TYPE IN ('Date', 'DateTime', 'SmallDateTime', 'DateTime2', 'time')\n   AND TABLE_NAME = @TABLE_NAME\n   AND TABLE_SCHEMA = @TABLE_SCHEMA\n  END\nIF @LOBCol = 1\n BEGIN\n  INSERT INTO #ColumnList (COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH)\n   SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS\n   WHERE DATA_TYPE IN ('varchar', 'nvarchar', 'varbinary', 'xml')\n   AND TABLE_NAME = @TABLE_NAME\n   AND TABLE_SCHEMA = @TABLE_SCHEMA\n   AND CHARACTER_MAXIMUM_LENGTH = -1\n END\nEND\n-- Else test to get all column names\n-----------------------------------------------------------------------\n-- Test that there are columns to analyse\nSELECT @ColumnCheck = COUNT (*) FROM #ColumnList WHERE DATA_TYPE IS NOT NULL\nIF @ColumnCheck = 0\n BEGIN\n  RAISERROR('The columns do not exist in the selected database or no columns are selected',16,1)\n  RETURN\n END\n-----------------------------------------------------------------------\n-- Create Temp table used to hold profiling data\n-----------------------------------------------------------------------\nIF OBJECT_ID('tempdb..#ProfileData') IS NOT NULL\n DROP TABLE tempdb..#ProfileData;\n CREATE TABLE #ProfileData\n (\n  TABLE_SCHEMA NVARCHAR(128),\n  TABLE_NAME NVARCHAR(128),\n  COLUMN_NAME NVARCHAR(128),\n  ColumnDataLength INT,\n  DataType VARCHAR(128),\n  MinDataLength BIGINT,\n  MaxDataLength BIGINT,\n  AvgDataLength BIGINT,\n  MinDate SQL_VARIANT,\n  MaxDate SQL_VARIANT,\n  NoDistinct BIGINT,\n  NoNulls NUMERIC(32,4),\n  NoZeroLength NUMERIC(32,4),\n  PercentageNulls NUMERIC(9,4),\n  PercentageZeroLength NUMERIC(9,4),\n  NoDateWithHourminuteSecond BIGINT NULL,\n  NoDateWithSecond BIGINT NULL,\n  NoIsNumeric BIGINT NULL,\n  NoIsDate BIGINT NULL,\n  NoAtLimit BIGINT NULL,\n  IsFK BIT NULL DEFAULT 0,\n  DataTypeComments NVARCHAR(1500)\n );\n-- Get row count\nDECLARE @ROWCOUNTTEXT NVARCHAR(1000) = ''\nDECLARE @ROWCOUNTPARAM NVARCHAR(50) = ''\nSET @ROWCOUNTTEXT = 'SELECT @ROWCOUNTOUT = COUNT (*) FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WITH (NOLOCK)'\nSET @ROWCOUNTPARAM = '@ROWCOUNTOUT INT OUTPUT'\nEXECUTE sp_executesql @ROWCOUNTTEXT, @ROWCOUNTPARAM, @ROWCOUNTOUT = @ROWCOUNT OUTPUT\n-----------------------------------------------------------------------\n-- Test that there are records to analyse\nIF @ROWCOUNT = 0\n BEGIN\n  RAISERROR('There is no data in the table to analyse',16,1)\n  RETURN\n END\n-----------------------------------------------------------------------\n-- Define the dynamic SQL used for each column to analyse\n-----------------------------------------------------------------------\nSET @SQLMETADATA = 'INSERT INTO #ProfileData (ColumnDataLength,COLUMN_NAME,TABLE_SCHEMA,TABLE_NAME,DataType,MaxDataLength,MinDataLength,AvgDataLength,MaxDate,MinDate,NoDateWithHourminuteSecond,NoDateWithSecond,NoIsNumeric,NoIsDate,NoNulls,NoZeroLength,NoDistinct)'\nDECLARE SQLMETADATA_CUR CURSOR LOCAL FAST_FORWARD FOR \n SELECT COLUMN_NAME, CHARACTER_MAXIMUM_LENGTH, DATA_TYPE FROM #ColumnList\nOPEN SQLMETADATA_CUR \nFETCH NEXT FROM SQLMETADATA_CUR INTO @COLUMN_NAME, @CHARACTER_MAXIMUM_LENGTH, @DATA_TYPE \nWHILE @@FETCH_STATUS = 0 \n BEGIN \n  SET @SQLMETADATA = @SQLMETADATA +'\n  SELECT TOP 100 PERCENT ' + CAST(@CHARACTER_MAXIMUM_LENGTH AS VARCHAR(20)) + ' ,''' + QUOTENAME(@COLUMN_NAME) + '''\n  ,''' + QUOTENAME(@TABLE_SCHEMA) + '''\n  ,''' + QUOTENAME(@TABLE_NAME) + '''\n  ,''' + @DATA_TYPE + ''''\n   + CASE\n      WHEN @DATA_TYPE IN ('varchar', 'nvarchar', 'char', 'nchar') \n   AND @CHARACTER_MAXIMUM_LENGTH >= 0 \n     THEN + '\n  , MAX(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  , MIN(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  , AVG(LEN(' + QUOTENAME(@COLUMN_NAME) + '))\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,(SELECT COUNT (*) from '\n   + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE ISNUMERIC(' + QUOTENAME(@COLUMN_NAME) + ') = 1) \n  ,(SELECT COUNT (*) from ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE ISDATE(' + QUOTENAME(@COLUMN_NAME) + ') = 1) '\n  WHEN @DATA_TYPE IN ('numeric', 'int', 'bigint', 'tinyint', 'smallint', 'decimal', 'money', 'smallmoney', 'float','real') THEN + '\n  ,MAX(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,AVG(CAST(' + QUOTENAME(@COLUMN_NAME) + ' AS NUMERIC(36,2)))\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('DateTime', 'SmallDateTime') THEN + '\n  ,NULL \n  ,NULL \n  ,NULL \n  ,MAX(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN(' + QUOTENAME(@COLUMN_NAME) + ')\n  ,(SELECT COUNT (*) from ' \n   + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE (CONVERT(NUMERIC(20,12), ' + QUOTENAME(@COLUMN_NAME) + ' ) - FLOOR(CONVERT(NUMERIC(20,12), ' + QUOTENAME(@COLUMN_NAME) + ')) <> 0))\n  ,(SELECT COUNT (*) from '\n   + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE DATEPART(ss,' + QUOTENAME(@COLUMN_NAME) + ') <> 0 OR DATEPART(mcs,' + QUOTENAME(@COLUMN_NAME) + ') <> 0) \n  ,NULL \n  ,NULL '\n    WHEN @DATA_TYPE IN ('DateTime2') THEN + '\n  ,NULL \n  ,NULL \n  ,NULL \n  ,MAX(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN(' + QUOTENAME(@COLUMN_NAME) + ')\n  ,NULL\n  ,NULL\n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('Date') THEN + '\n  ,NULL \n  ,NULL \n  ,NULL \n  ,MAX('\n   + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN('\n  + QUOTENAME(@COLUMN_NAME) + ')\n  ,NULL \n  ,NLL \n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('xml') THEN + '\n  ,MAX(LEN(CAST(' + QUOTENAME(@COLUMN_NAME) + ' AS NVARCHAR(MAX)))) \n  ,MIN(LEN(CAST(' + QUOTENAME(@COLUMN_NAME) + ' AS NVARCHAR(MAX)))) \n  ,AVG(LEN(CAST(' + QUOTENAME(@COLUMN_NAME) + ' AS NVARCHAR(MAX)))) \n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n  WHEN @DATA_TYPE IN ('varbinary','varchar','nvarchar') AND  @CHARACTER_MAXIMUM_LENGTH = -1 THEN + '\n  ,MAX(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  ,MIN(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  ,AVG(LEN(' + QUOTENAME(@COLUMN_NAME) + '))\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('binary') THEN + '\n  ,MAX(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  ,MIN(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  ,AVG(LEN(' + QUOTENAME(@COLUMN_NAME) + '))\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('time') THEN + '\n  ,NULL \n  ,NULL \n  ,NULL \n  ,MAX(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN(' + QUOTENAME(@COLUMN_NAME) + ')\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n   ELSE + '\n  ,NULL \n  ,NULL\n  ,NULL\n  ,NULL\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n  END + '\n  ,(SELECT COUNT(*) FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE ' + QUOTENAME(@COLUMN_NAME) + ' IS NULL)'\n   + CASE\n   WHEN @DATA_TYPE IN ('varchar', 'nvarchar', 'char', 'nchar') THEN + '\n  ,(SELECT COUNT(*) FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) +  ' WHERE LEN(LTRIM(RTRIM(' + QUOTENAME(@COLUMN_NAME) + '))) = '''')'\n   ELSE + '\n  ,NULL'\n   END + '\n  ,(SELECT COUNT(DISTINCT ' + QUOTENAME(@COLUMN_NAME) + ') FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE ' + QUOTENAME(@COLUMN_NAME) + ' IS NOT NULL )\n  FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WITH (NOLOCK)\n  UNION'\n FETCH NEXT FROM SQLMETADATA_CUR INTO @COLUMN_NAME, @CHARACTER_MAXIMUM_LENGTH, @DATA_TYPE \nEND \nCLOSE SQLMETADATA_CUR \nDEALLOCATE SQLMETADATA_CUR \nSET @SQLMETADATA = LEFT(@SQLMETADATA, LEN(@SQLMETADATA) -5)\nEXEC (@SQLMETADATA)\n-----------------------------------------------------------------------\n-- Final Calculations\n-----------------------------------------------------------------------\n-- Indicate Foreign Keys\n; WITH FK_CTE (FKColumnName)\nAS\n(\n SELECT\n   DISTINCT CU.COLUMN_NAME\n  FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC\n   INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CU\n     ON TC.CONSTRAINT_NAME = CU.CONSTRAINT_NAME \n     AND TC.TABLE_SCHEMA = CU.TABLE_SCHEMA \n     AND TC.TABLE_NAME = CU.TABLE_NAME\n     AND TC.TABLE_SCHEMA = @TABLE_SCHEMA\n     AND TC.TABLE_NAME = @TABLE_NAME\n     AND CONSTRAINT_TYPE = 'FOREIGN KEY'\n)\nUPDATE P\n SET P.IsFK = 1\n FROM #ProfileData P\n  INNER JOIN FK_CTE CTE\n   ON P.COLUMN_NAME = CTE.FKColumnName\n-- Calculate percentages\nUPDATE #ProfileData\n SET PercentageNulls = (NoNulls / @ROWCOUNT) * 100\n    ,PercentageZeroLength = (NoZeroLength / @ROWCOUNT) * 100\n-- Add any comments\n-- Datatype suggestions\n-- First get number of records where a variation could be an anomaly\nSET @DataTypeVariance = ROUND((@ROWCOUNT * @DataTypePercentage) / 100, 0)\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be one of the DATE types. '\n WHERE NoIsDate BETWEEN (@ROWCOUNT -@DataTypeVariance) AND (@ROWCOUNT + @DataTypeVariance)\n AND DataType IN ('varchar', 'nvarchar', 'char', 'nchar')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be one of the NUMERIC types. '\n WHERE NoIsNumeric BETWEEN (@ROWCOUNT -@DataTypeVariance) AND (@ROWCOUNT + @DataTypeVariance)\n AND DataType IN ('varchar', 'nvarchar', 'char', 'nchar')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be INT type. '\n WHERE MinDataLength >= -2147483648\n AND MaxDataLength <= 2147483648\n AND DataType IN ('bigint')\n \nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be SMALLINT type. '\n WHERE MinDataLength >= -32768\n AND MaxDataLength <= 32767\n AND DataType IN ('bigint','int')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be TINYINT type. '\n WHERE MinDataLength >= 0\n AND MaxDataLength <= 255\n AND DataType IN ('bigint','int','smallint')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be SMALLDATE type. '\n WHERE NoDateWithSecond = 0\n AND MinDate >= '19000101'\n AND MaxDate <= '20790606'\n AND DataType IN ('datetime','datetime2')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be DATE type (SQL Server 2008 only). '\n WHERE NoDateWithHourminuteSecond = 0\n AND DataType IN ('datetime','datetime2')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be DATETIME type. '\n WHERE MinDate >= '17530101'\n AND MaxDate <= '99991231'\n AND DataType IN ('datetime2')\n-- Empty column suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = ISNULL(DataTypeComments,'') + 'Seems empty - is it required? '\n WHERE (PercentageNulls = 100 OR PercentageZeroLength = 100)\n AND IsFK = 0\n-- Null column suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = ISNULL(DataTypeComments,'') + 'There is a large percentage of NULLs - attention may be required. '\n WHERE PercentageNulls >= @NullBoundaryPercent\n-- Distinct value suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = ISNULL(DataTypeComments,'') + 'Few distinct elements - potential for reference/lookup table (contains NULLs).'\n WHERE NoDistinct < @DistinctValuesMinimum\n AND @ROWCOUNT > @DistinctValuesMinimum\n AND IsFK = 0\n AND PercentageNulls <> 100\n AND NoNulls <> 0\n-- FK suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = ISNULL(DataTypeComments,'') + 'Few distinct elements - potential for Foreign Key.'\n WHERE NoDistinct < @DistinctValuesMinimum\n AND @ROWCOUNT > @DistinctValuesMinimum\n AND IsFK = 0\n AND NoNulls = 0\n AND DataType NOT LIKE '%Date%'\n AND DataType <> 'Time'\n-- Filestream suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly a good candidate for FILESTREAM (SQL Server 2008 only).'\n WHERE AvgDataLength >= 1000000\n AND DataType IN ('varbinary')\n AND ColumnDataLength = -1\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly not a good candidate for FILESTREAM (SQL Server 2008 only).'\n WHERE AvgDataLength < 1000000\n AND DataType IN ('varbinary')\n AND ColumnDataLength = -1\n-- Sparse Column Suggestions\nIF OBJECT_ID('tempdb..#SparseThresholds') IS NOT NULL\n  DROP TABLE tempdb..#SparseThresholds;\n  CREATE TABLE #SparseThresholds (DataType VARCHAR(128), Threshold NUMERIC(9,4))\n  INSERT INTO #SparseThresholds (DataType, Threshold)\n   VALUES \n    ('tinyint',86),\n    ('smallint',76),    \n    ('int',64),    \n    ('bigint',52),    \n    ('real',64),    \n    ('float',52),    \n    ('money',64),    \n    ('smallmoney',64),    \n    ('smalldatetime',52),    \n    ('datetime',52),    \n    ('uniqueidentifier',43),    \n    ('date',69),    \n    ('datetime2',52),    \n    ('decimal',42),    \n    ('nuumeric',42),    \n    ('char',60),    \n    ('varchar',60),    \n    ('nchar',60),    \n    ('nvarchar',60),    \n    ('binary',60),    \n    ('varbinary',60),    \n    ('xml',60)    \n; WITH Sparse_CTE (COLUMN_NAME, SparseComment)\nAS\n(\nSELECT\n  P.COLUMN_NAME\n ,CASE\n  WHEN P.PercentageNulls >= T.Threshold THEN 'Could benefit from sparse columns. '\n  ELSE ''\n  END AS SparseComment\nFROM #ProfileData P\n INNER JOIN #SparseThresholds T\n  ON P.DataType = T.DataType\n)\nUPDATE PT\n  SET PT.DataTypeComments = \n      CASE WHEN PT.DataTypeComments IS NULL THEN CTE.SparseComment\n           ELSE ISNULL(PT.DataTypeComments,'') + CTE.SparseComment + '. '\n      END\n FROM #ProfileData PT\n  INNER JOIN Sparse_CTE CTE\n   ON PT.COLUMN_NAME = CTE.COLUMN_NAME\n-----------------------------------------------------------------------\n-- Optional advanced analysis\n-----------------------------------------------------------------------\nIF @AdvancedAnalysis = 1\n BEGIN\n-----------------------------------------------------------------------\n-- Data at data boundaries\n-----------------------------------------------------------------------\n  IF OBJECT_ID('tempdb..#LimitTest') IS NOT NULL\n    DROP TABLE tempdb..#LimitTest;\n    CREATE TABLE #LimitTest (COLUMN_NAME VARCHAR(128), NoAtLimit BIGINT);\n    DECLARE @advancedtestSQL VARCHAR(MAX) = 'INSERT INTO #LimitTest (COLUMN_NAME, NoAtLimit)' + CHAR(13)\n    SELECT @advancedtestSQL = @advancedtestSQL + 'SELECT '''+ COLUMN_NAME + ''', COUNT('+ COLUMN_NAME + ') FROM ' + @TABLE_SCHEMA + '.' + @TABLE_NAME + \n     CASE\n       WHEN DataType IN ('numeric', 'int', 'bigint', 'tinyint', 'smallint', 'decimal', 'money', 'smallmoney', 'float','real') THEN ' WHERE '+ COLUMN_NAME + ' = ' + CAST(ISNULL(MaxDataLength,0) AS VARCHAR(40)) + ' OR '+ COLUMN_NAME + ' = ' + CAST(ISNULL(MinDataLength,0) AS VARCHAR(40)) + CHAR(13) + ' UNION' + CHAR(13)\n       ELSE ' WHERE LEN('+ COLUMN_NAME + ') = ' + CAST(ISNULL(MaxDataLength,0) AS VARCHAR(40)) + ' OR LEN('+ COLUMN_NAME + ') = ' + CAST(ISNULL(MinDataLength,0) AS VARCHAR(40)) + CHAR(13) + ' UNION' + CHAR(13)\n     END\n    FROM #ProfileData \n    WHERE DataType IN ('numeric', 'int', 'bigint', 'tinyint', 'smallint', 'decimal', 'money', 'smallmoney', 'float','real','varchar', 'nvarchar', 'char', 'nchar', 'binary')\n    SET @advancedtestSQL = LEFT(@advancedtestSQL,LEN(@advancedtestSQL) -6) \n    EXEC (@advancedtestSQL)\n    UPDATE M\n      SET M.NoAtLimit = T.NoAtLimit\n         ,M.DataTypeComments = \n           CASE\n             WHEN CAST(T.NoAtLimit AS NUMERIC(36,2)) / CAST(@ROWCOUNT AS NUMERIC(36,2)) >= @BoundaryPercent THEN ISNULL(M.DataTypeComments,'') + 'Large numbers of data elements at the max/minvalues. '\n             ELSE M.DataTypeComments\n           END\n    FROM #ProfileData M\n     INNER JOIN #LimitTest T\n      ON M.COLUMN_NAME = T.COLUMN_NAME\n   -----------------------------------------------------------------------\n   -- Domain analysis\n   -----------------------------------------------------------------------\n   IF OBJECT_ID('tempdb..#DomainAnalysis') IS NOT NULL\n     DROP TABLE tempdb..#DomainAnalysis;\n   CREATE TABLE #DomainAnalysis\n   (\n    DomainName NVARCHAR(128)\n   ,DomainElement NVARCHAR(4000)\n   ,DomainCounter BIGINT\n   ,DomainPercent NUMERIC(7,4)\n   );\n   DECLARE @DOMAINSQL VARCHAR(MAX) = 'INSERT INTO #DomainAnalysis (DomainName, DomainElement, DomainCounter) '\n   DECLARE SQLDOMAIN_CUR CURSOR LOCAL FAST_FORWARD FOR \n     SELECT COLUMN_NAME, DataType \n  FROM #ProfileData \n   WHERE NoDistinct < @DistinctValuesMinimum\n   OPEN SQLDOMAIN_CUR \n   FETCH NEXT FROM SQLDOMAIN_CUR INTO @COLUMN_NAME, @DATA_TYPE \n   WHILE @@FETCH_STATUS = 0 \n    BEGIN \n     SET @DOMAINSQL = @DOMAINSQL + 'SELECT ''' + @COLUMN_NAME + ''' AS DomainName, CAST( '+ @COLUMN_NAME + ' AS VARCHAR(4000)) AS DomainElement, COUNT(ISNULL(CAST(' + @COLUMN_NAME + ' AS NVARCHAR(MAX)),'''')) AS DomainCounter FROM ' + @TABLE_SCHEMA + '.' + @TABLE_NAME + ' GROUP BY ' + @COLUMN_NAME + ''\n     + ' UNION '\n     FETCH NEXT FROM SQLDOMAIN_CUR INTO @COLUMN_NAME, @DATA_TYPE \n   END \n  CLOSE SQLDOMAIN_CUR \n  DEALLOCATE SQLDOMAIN_CUR \n  SET @DOMAINSQL = LEFT(@DOMAINSQL, LEN(@DOMAINSQL) -5) + ' ORDER BY DomainName ASC, DomainCounter DESC '\n   EXEC (@DOMAINSQL)\n   -- Now calculate percentages (this appraoch is faster than doing it when performing the domain analysis)\n   ; WITH DomainCounter_CTE (DomainName, DomainCounterTotal)\n   AS\n  (\n   SELECT DomainName, SUM(ISNULL(DomainCounter,0)) AS DomainCounterTotal\n    FROM #DomainAnalysis \n    GROUP BY DomainName\n  )\n  UPDATE D\n    SET D.DomainPercent = (CAST(D.DomainCounter AS NUMERIC(36,4)) / CAST(CTE.DomainCounterTotal AS NUMERIC(36,4))) * 100\n   FROM #DomainAnalysis D\n    INNER JOIN DomainCounter_CTE CTE\n     ON D.DomainName = CTE.DomainName\n   WHERE D.DomainCounter <> 0\n END\n-- Advanced analysis\n-----------------------------------------------------------------------\n-- Output results from the profile and domain data tables\n-----------------------------------------------------------------------\nselect\n   *\n from #ProfileData\nIF @AdvancedAnalysis = 1\n BEGIN\n  select\n    *\n   from #DomainAnalysis\n END\nEND TRY\nBEGIN CATCH\n SELECT\n  ERROR_NUMBER() AS ErrorNumber\n ,ERROR_SEVERITY() AS ErrorSeverity\n ,ERROR_STATE() AS ErrorState\n ,ERROR_PROCEDURE() AS ErrorProcedure\n ,ERROR_LINE() AS ErrorLine\n ,ERROR_MESSAGE() AS ErrorMessage;\n \nEND CATCH",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "fno",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}