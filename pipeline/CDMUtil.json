{
	"name": "CDMUtil",
	"properties": {
		"description": "Use this template to reads Common Data Model (CDM) metadata generated by Dynamics 365 Finance and Operations Export to Datalake feature, convert and execute SQL DDL statements on the target endpoint. \n\nTarget endpoints and metadata types \n\nSynapse Serverless pool: OpenRowSet Views/External Tables and Views \nSynapse Dedicated pool: Tables and Views \nSQL Server: Tables and Views \n\nRead documentation for details: \nhttps://github.com/microsoft/Dynamics-365-FastTrack-Implementation-Assets/blob/master/Analytics/CDMUtilSolution/readme_cdmutilpipeline.md",
		"activities": [
			{
				"name": "Target_WriteMetadata",
				"description": "Switch to different target endpoints ( Synapse Serverless (Default), Synapse Dedicated pool (SynapseTable) or SQL endpoint = SQLTable)",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "SQLTarget_CopyMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SQLTarget_CopyDependency",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@pipeline().parameters.DDLType",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "SynapseTable",
							"activities": [
								{
									"name": "CreateSynapseTable",
									"description": "Synapse Dedicated pool endpoint",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "Target_Database",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "declare @dependency bit = @{if(equals(pipeline().parameters.GetDependency,false),0,1)};\ndeclare @environment nvarchar(100) = '@{pipeline().parameters.Environment}';\ndeclare @Storage nvarchar(1000) = '@{pipeline().parameters.StorageAccount}'\ndeclare @Container nvarchar(1000) = '@{pipeline().parameters.container}'\nDeclare @StorageDS nvarchar(300) = '@{pipeline().parameters.StorageAccount}@{replace(concat(pipeline().parameters.container,'/',pipeline().parameters.Environment), '//','/')}';\n\ndeclare @schema nvarchar(10) = '@{pipeline().parameters.Schema}';\ndeclare @fileFormat nvarchar(100);\ndeclare @ObjectTypes varchar(100) = '@{pipeline().parameters.ObjectTypes}'\ndeclare @TablesPredicate varchar(12) = (select value + '%'  from string_split(@ObjectTypes, ',') where value = 'Tables')\ndeclare @ChangeFeedPredicate varchar(12) = (select value + '%'  from string_split(@ObjectTypes, ',') where value = 'ChangeFeed')\ndeclare @EntitiesPredicate varchar(12) = (select value + '%'  from string_split(@ObjectTypes, ',') where value = 'Entities')\ndeclare @dateTimeFunct nvarchar(50) = 'SYSUTCDATETIME()';\n\nprint('--Metadata prep--');\n\tIF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_cdmmetadata]') AND type in (N'U'))\n\t\tcreate table _cdmmetadata\n\t\t(\n\t\t\t[definitions] [varchar](max) NULL,\n\t\t\t[FilePath] [varchar](1000) NULL,\n\t\t\t[Environment]   [varchar](1000) NULL,\n\t\t\t[entities] varchar(max) Null,\n\t\t\t[EntityName] varchar(500) Null,\n\t\t\t[DataPath] varchar(1000) Null,\n\t\t\t[ObjectType] varchar(1000) null,\n\t\t\t[Resolved] int Null\n\t\t)\n\t\tWITH(HEAP)\n\n\n\tIF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_sqlmetadata]') AND type in (N'U'))\n\t\tCREATE TABLE [dbo]._sqlmetadata\n\t\t(\n\t\t\t[Environment] [varchar](1000) NULL,FilePath varchar(1000), [ObjectType] varchar(1000) null,\n\t\t\tEntityName varchar(400), DataPath VARCHAR(500), ViewDef varchar(max), ColumnList varchar(max), NameList varchar(max), DataTypeList varchar(max), \n\t\t\tDataLengthList varchar(max),KeyColumns varchar(1000)\n\t\t)\n\t\tWITH(HEAP);\n\n\tIF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_controltableforcopy]') AND type in (N'U'))\n\t\tCREATE TABLE [dbo].[_controltableforcopy]\n\t\t(\n\t\t\t[TableSchema] [varchar](20) NULL,\n\t\t\t[TableName] [varchar](255) NULL,\n\t\t\t[StorageAccount] varchar(1000) Null,\n\t\t\t[Container] varchar(1000) Null,\n\t\t\t[Environment] varchar(1000) Null,\n\t\t\t[DataPath] varchar(1000) Null,\n\t\t\t[DataLocation] [varchar](1000) NULL,\n\t\t\t[FileFormat]   [varchar](100) NULL,\n\t\t\t[LastCopyDateTime] [datetime2](7) NULL,\n\t\t\t[LastCopyMarker] [varchar](255) NULL,\n\t\t\t[LastCopyStatus] [int] NULL,\n\t\t\t[LastCopyDuration] [int] NULL,\n\t\t\t[Incremental] [int] DEFAULT 1,\n\t\t\t[RefreshInterval] [int] DEFAULT 60,\n\t\t\t[Active] int DEFAULT 1\n\t\t)\n\t\tWITH (HEAP)\n\n\tIF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_viewreplacement]') AND type in (N'U'))\n\t\tCREATE Table  [dbo].[_viewreplacement] \n\t\t(\n\t\t\tViewName varchar(100),\n\t\t\tS1 varchar(max),\n\t\t\tR1 varchar(max),\n\t\t\tS2 varchar(max),\n\t\t\tR2 varchar(max),\n\t\t\tS3 varchar(max),\n\t\t\tR3 varchar(max),\n\t\t\tS4 varchar(max),\n\t\t\tR4 varchar(max),\n\t\t\tS5 varchar(max),\n\t\t\tR5 varchar(max)\n\t\t)\n\t\tWITH(HEAP);\n\n\tIF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_dependency]') AND type in (N'U'))\n\t\tCreate Table _dependency \n\t\t(\n\t\t\tParentEntity varchar(200) null,\n\t\t\tObjectType varchar(200) null ,\n\t\t\tEntityName varchar(200) null,\n\t\t\tColumnList varchar(max) Null,\t\n\t\t\tViewDef varchar(max) null,\n\t\t\tKeyColumns varchar(300) null)\n\t\tWITH(HEAP)\n\n\tIF (@dependency = 1)\n\tBEGIN\n\n\tCOPY INTO [dbo].__dependencies \n\t\tFROM '@{pipeline().parameters.StorageAccount}@{replace(concat(pipeline().parameters.container,'/',pipeline().parameters.Environment), '//','/')}/dependencies.parquet'\n\t\tWITH \n\t\t(\n\t\t\tFILE_TYPE = 'Parquet',\n\t\t\tCREDENTIAL = (IDENTITY = 'Managed Identity'),\n\t\t\tAUTO_CREATE_TABLE = 'ON'\n\t\t)\n\n\tinsert into _dependency (ParentEntity, ObjectType, EntityName, ViewDef)\n\tSELECT \t\n\t\t\tEntityName as ParentEntity,\n\t\t\t'Entities' as ObjectType,\n\t\t\tObjectName as EntityName,\n\t\t\t[definition] as ViewDef\n\t\tFROM __dependencies\n\t\tCross apply openjson(DependentObjects) WITH (\n\t\t\tobjectName nvarchar(200),  \n\t\t\ttype NVARCHAR(50), \n\t\t\t[definition] nvarchar(max))\n\t\twhere type = 'view'\n\t\tand EntityName != ObjectName;\n\t\n\tinsert into _dependency (ParentEntity, ObjectType, EntityName, ColumnList, KeyColumns)\n\tSELECT \t\n\t\t\tEntityName,\n\t\t\t'Tables' as ObjectType,\n\t\t\tTableName,\n\t\t\tSTRING_AGG(CONVERT(NVARCHAR(max), + '[' + COLUMN_NAME + '] ' +  \n\t\t\t\tcase    \n\t\t\t\t\twhen DATA_TYPE = 'nvarchar' and CHARACTER_MAXIMUM_LENGTH < 0  then 'nvarchar(max)'   \n\t\t\t\t\twhen DATA_TYPE = 'nvarchar' then 'nvarchar(' + convert(nvarchar(10), CHARACTER_MAXIMUM_LENGTH) + ')'\n\t\t\t\t\twhen DATA_TYPE = 'timestamp' then 'varbinary(100)'\n\t\t\t\t\twhen DATA_TYPE = 'decimal' then 'decimal(32,16)'  \n\t\t\t\t\telse DATA_TYPE\n\t\t\t\tend) , ','),\n\t\t\tstring_agg(convert(nvarchar(max), case when [Key] is not null then COLUMN_NAME else null end), ',') WITHIN GROUP (ORDER BY [Key] ASC)  as KeyColumn\n\t\t\tFROM __dependencies\n\t\tCross apply openjson(DependentTables) \n\t\tWITH (TableName nvarchar(200),  Attributes NVARCHAR(MAX) '$.Attributes' AS JSON)\n\t\tCROSS APPLY OPENJSON(Attributes,'$')\n\t\tWITH \n\t\t(\n\t\t\tCOLUMN_NAME NVARCHAR(300) '$.COLUMN_NAME',DATA_TYPE NVARCHAR(300) '$.DATA_TYPE',CHARACTER_MAXIMUM_LENGTH NVARCHAR(300) '$.CHARACTER_MAXIMUM_LENGTH', [KEY] int\n\t\t)\n\t\tgroup by EntityName, TableName;\n\n\tdrop table __dependencies\n\n\tEND;\n\n\t-- copy data to _viewreplacement\n\n\tBEGIN TRY;\n\t\n\tCreate Table #ReplaceViewSyntax\n\t(\n\t\tjsonText nvarchar(max)\n\t) \t\n\tWITH(HEAP);\n\n\ttruncate table [dbo].[_viewreplacement];\n\n\tCOPY INTO #ReplaceViewSyntax (jsonText)\n\t\tFROM '@{pipeline().parameters.StorageAccount}@{replace(concat(pipeline().parameters.container,'/',pipeline().parameters.Environment), '//','/')}/ReplaceViewSyntax.json'\n\tWITH (\n\t\t\tFILE_TYPE = 'CSV'\n\t\t\t,fieldterminator ='0x0b'\n\t\t\t,fieldquote = '0x0b'\n\t\t\t,rowterminator = '0x0c'  \n\t\t\t,CREDENTIAL=(IDENTITY= 'Managed Identity')\n\t\t);\n\t\n\tWITH  \n\tViewReplacementDefinition\n\tAS\n\t(\n\t\tSELECT   \n    \t\t\t ROW_NUMBER() OVER ( PARTITION BY  [ViewName] ORDER BY (SELECT NULL)) as [ReplacementIndex]\n\t\t\t\t ,[SearchText]\n\t\t\t\t ,[ReplacementText]\n\t\t\t\t ,[ViewName]\n\t\t\t\t from #ReplaceViewSyntax \t\t\t\n\t\t\t\tCROSS APPLY OPENJSON([jsonText])   \n\t\t\t\tWITH (    [SearchText] NVARCHAR(MAX) '$.Key'\n    \t\t\t\t\t, [ReplacementText] NVARCHAR(MAX) '$.Value' \n    \t\t\t\t\t, [ViewName] NVARCHAR(110) '$.ViewName' \n\t\t\t\t)\n\t)\n\n\tInsert Into  [dbo].[_viewreplacement] \n\tSELECT S.ViewName,\n\t\tisnull(S1, '') AS S1,\n\t\tisnull(R1, '') AS R1,\n\t\tisnull(S2, '') AS S2,\n\t\tisnull(R2, '') AS R2,\n\t\tisnull(S3, '') AS S3,\n\t\tisnull(R3, '') AS R3,\n\t\tisNull(S4, '') AS S4,\n\t\tisNull(R4, '') AS R4,\n\t\tisnull(S5, '') AS S5,\n\t\tisnull(R5, '') AS R5\n\tFROM (\n\t\tSELECT ViewName,\n\t\t\t[1] AS S1,\n\t\t\t[2] AS S2,\n\t\t\t[3] AS S3,\n\t\t\t[4] AS S4,\n\t\t\t[5] AS S5\n\t\tFROM (\n\t\t\tSELECT ViewName,\n\t\t\t\tSearchText,\n\t\t\t\t[ReplacementIndex]\n\t\t\tFROM ViewReplacementDefinition\n\t\t\t) p\n\t\tPIVOT(MIN([SearchText]) FOR [ReplacementIndex] IN (\n\t\t\t\t\t[1],\n\t\t\t\t\t[2],\n\t\t\t\t\t[3],\n\t\t\t\t\t[4],\n\t\t\t\t\t[5]\n\t\t\t\t\t)) AS ReplaceOldStringPivot\n\t\t) S\n\tJOIN (\n\t\tSELECT ViewName,\n\t\t\t[1] AS R1,\n\t\t\t[2] AS R2,\n\t\t\t[3] AS R3,\n\t\t\t[4] AS R4,\n\t\t\t[5] AS R5\n\t\tFROM (\n\t\t\tSELECT ViewName,\n\t\t\t\t[ReplacementText],\n\t\t\t\t[ReplacementIndex]\n\t\t\tFROM ViewReplacementDefinition\n\t\t\t) p\n\t\tPIVOT(MIN([ReplacementText]) FOR [ReplacementIndex] IN (\n\t\t\t\t\t[1],\n\t\t\t\t\t[2],\n\t\t\t\t\t[3],\n\t\t\t\t\t[4],\n\t\t\t\t\t[5]\n\t\t\t\t\t)) AS ReplaceNewStringPivot\n\t\t) R\n\t\tON S.ViewName = R.ViewName\n\n\tDrop Table #ReplaceViewSyntax;\n\n\tEND TRY\n\tBEGIN CATCH\n\t\tprint('ReplaceViewSyntax.json error')\n\tEND CATCH;\n\n\t\n\t\ndelete from dbo._cdmmetadata where Environment = @environment; \n\nCopy Into dbo._cdmmetadata (definitions, FilePath,Environment,entities, EntityName)\n\tFROM '@{pipeline().parameters.StorageAccount}@{replace(concat(pipeline().parameters.container,'/',pipeline().parameters.Environment), '//','/')}/metadata.parquet'\nWITH (\n    FILE_TYPE = 'Parquet',\n    CREDENTIAL = (IDENTITY = 'Managed Identity'),\n\tAUTO_CREATE_TABLE = 'ON'\n\t)\n\t\t\nupdate _cdmmetadata\nset EntityName = case when FilePath like '%ChangeFeed/%' then '_cdc_' + EntityName else  EntityName end ,\nDataPath = replace(replace(replace([FilePath], '/resolved/', '/'), '.cdm.json', ''), '-resolved', '') + '/*.csv',\nResolved = case when FilePath  like '%resolved%' then 1 else 0 end,\nObjectType = SUBSTRING (FilePath,0,CHARINDEX('/',FilePath)) \nwhere  Environment = @environment\n\ndelete from _cdmmetadata\nwhere FilePath not in (\nselect x.[FilePath]\nfrom _cdmmetadata x\ninner join \n(\n\tselect max (resolved) as resolved ,  DataPath\n\tfrom _cdmmetadata \n\tgroup by DataPath\n) y\non x.resolved = y.resolved and x.dataPath = y.datapath\nwhere [definitions] is not null)\n\t\n\tdelete from [dbo]._sqlmetadata where Environment = @environment; \n\n\tinsert into [dbo]._sqlmetadata (Environment, EntityName, ObjectType, ColumnList, NameList, DataPath, ViewDef)\n\tselect distinct\n\t@environment,\n\tfinal.EntityName,\n\tfinal.ObjectType,\t\n\tfinal.ColumnListP1,\n\tfinal.ColumnListP2,\n\tfinal.DataPath,\n\tfinal.ViewDef\n\tfrom \n\t\t(\n\t\t\tselect \n\t\t\t\tx.EntityName,\n\t\t\t\tx.DataPath,\n\t\t\t\treplace(replace(replace(x.ViewDef ,isNull(vr.S1, ''), isNull(vr.R1,'')), isnull(vr.S2, ''), isnull(vr.R2,'')),isnull(vr.S3, ''), isnull(vr.R3, '')) as ViewDef,\n\t\t\t\tx.ObjectType,\n\t\t\t\tcase \n\t\t\t\t\twhen x.ObjectType = 'ChangeFeed' and  x.ViewDef is not null then 0 \n\t\t\t\t\telse 1 \n\t\t\t\tend as IsValid,\n\t\t\t\tSTRING_AGG(CONVERT(NVARCHAR(max), + '[' + name + '] ' +  \n\t\t\t\tcase    \n\t\t\t\t\twhen x.dataType = 'nvarchar' and x.maxLength < 0  then 'nvarchar(max)'   \n\t\t\t\t\twhen x.datatype = 'nvarchar' then 'nvarchar(' + convert(nvarchar(10), x.maxLength) + ')'\n\t\t\t\t\twhen x.datatype = 'varbinary' then 'varbinary(' + convert(nvarchar(10), x.maxLength) + ')'\n\t\t\t\t\twhen x.datatype = 'decimal' then 'decimal(32,16)'  \n\t\t\t\t\telse x.datatype\n\t\t\t\tend) , ',') WITHIN GROUP (ORDER BY ordinal ASC) as ColumnListP1,\n\t\t\t\tSTRING_AGG(CONVERT(NVARCHAR(max), + '[' + name + '] ' +  \n\t\t\t\tcase    \n\t\t\t\t\twhen x.dataType = 'nvarchar' and x.maxLength < 0  then 'default '''   \n\t\t\t\t    else ''\n\t\t\t\tend) , ',') WITHIN GROUP (ORDER BY ordinal ASC) as ColumnListP2\n\t\t\tfrom \n\t\t\t( \n\t\t\t\tselect \n\t\t\t\t\tFilePath,\n\t\t\t\t\tEntityName,\n\t\t\t\t\tObjectType,\n\t\t\t\t\tDataPath,   \n\t\t\t\t\t(Select ISNULL(viewDefinition, viewDefinition1)\n\t\t\t\t\t\tFrom  OPENJSON(definitions, '$[0].exhibitsTraits') \n\t\t\t\t\t\tWITH (\n\t\t\t\t\t\ttraitReference NVARCHAR(100) '$.traitReference',\n\t\t\t\t\t\tviewDefinition nvarchar(max) '$.arguments[0].value',\n\t\t\t\t\t\tviewDefinition1 nvarchar(max) '$.arguments[0]'\n\t\t\t\t\t\t)where traitReference = 'has.sqlViewDefinition') as ViewDef,\n\t\t\t\t\tname,   \n\t\t\t\t\tcase      \n\t\t\t\t\t\twhen datatype ='guid' then 'UNIQUEIDENTIFIER'  \n\t\t\t\t\t\twhen lower(name) ='_sysrowid' then 'bigint'\n\t\t\t\t\t\twhen datatype = 'string' and enum = 'is.constrainedList.wellKnown' then 'int'\n\t\t\t\t\t\twhen datatype = 'string' then 'nvarchar'\n\t\t\t\t\t\twhen datatype = 'int32' then 'int'   \n\t\t\t\t\t\twhen datatype = 'int64' then 'bigInt'    \n\t\t\t\t\t\twhen datatype = 'boolean' then 'bit'   \n\t\t\t\t\t\twhen datatype = 'double' then 'real' \n\t\t\t\t\t\twhen datatype = 'Time' then 'int'  \n\t\t\t\t\t\twhen datatype = 'Binary' then 'varbinary'  \n\t\t\t\t\t\telse datatype \n\t\t\t\t\tend as dataType,    \n\t\t\t\t\tcase \n\t\t\t\t\t\twhen datatype = 'string' and  maxLength > 4000 then -1\n\t\t\t\t\t\twhen datatype = 'string' and lower(name) ='lsn' then 60\n\t\t\t\t\t\twhen datatype = 'string' and lower(name) = 'start_lsn' then 60\n\t\t\t\t\t\twhen datatype = 'string' and lower(name) = 'seq_val' then 60\n\t\t\t\t\t\twhen datatype = 'string' and lower(name) = 'dml_action' then 15\n\t\t\t\t\t\twhen datatype = 'string' and lower(name) = 'update_mask' then 200\n\t\t\t\t\t\twhen datatype = 'string' and lower(name) = 'createdby' then 20\n\t\t\t\t\t\twhen datatype = 'string' and lower(name) = 'modifiedby' then 20\n\t\t\t\t\t\twhen datatype = 'string'  and maxLength is null then 1000\n\t\t\t\t\t\twhen datatype = 'Binary'  and maxLength is null then 100\n\t\t\t\t\t\twhen datatype = 'string'  then maxLength \n\t\t\t\t\tend as maxLength,\n\t\t\t\t\tenum,\n\t\t\t\t\t0 as ordinal\n\t\t\t\tfrom _cdmmetadata \n\t\t\t\tcross apply OPENJSON(definitions, '$[0].hasAttributes')  \n\t\t\t\t\tWITH (name nvarchar(200),  datatype NVARCHAR(50) '$.dataFormat' , maxLength int '$.maximumLength' \n\t\t\t\t\t,scale int '$.traits[0].arguments[1].value', enum nvarchar(max) '$.appliedTraits[3].traitReference')\n\t\t\t\t\twhere environment =   'finance.sandbox.operations.dynamics.com'\n\t\t) x\n\t\tleft outer join _viewreplacement vr on vr.ViewName = x.EntityName\n\t\tgroup by x.EntityName,x.objectType, x.DataPath,x.ViewDef, x.FilePath, S1, R1, S2, R2, S3, R3\n\t) final\n\twhere final.IsValid = 1\n\t\n\tinsert into [dbo]._sqlmetadata (Environment, EntityName, ObjectType, ColumnList, ViewDef)\n\tSELECT \t\n\t\t@environment,\n\t\tEntityName,\n\t\tObjectType,\n\t\tColumnList,\n\t\tViewDef\n\tfrom _dependency \n\twhere EntityName is not null\n\tand EntityName not in (select EntityName from _sqlmetadata where Environment = @environment );\n\n\tupdate T\n\tset T.KeyColumns = D.KeyColumns\n\tfrom [dbo]._sqlmetadata as T\n\tinner join _dependency D on T.ObjectType = D.ObjectType and T.EntityName = D.EntityName\n\twhere T.ObjectType = 'Tables' and T.Environment =  @environment;\n\nINSERT INTO [dbo].[_controltableforcopy](TableSchema,TableName, StorageAccount, Container, Environment , DataPath, DataLocation,FileFormat)\n\tSELECT distinct @schema, EntityName, @Storage, @Container, @Environment, dataPath, @StorageDS + '/' + dataPath, 'CSV' \n\tFROM _sqlmetadata\n\twhere DataPath like @TablesPredicate\n\tand Environment = @Environment\n\tand DataPath is not null\n\tand NOT EXISTS (SELECT DISTINCT TableName FROM [dbo].[_ControlTableForCopy] WHERE TableSchema = @schema and TableName = EntityName)\n\nDeclare @CreateTableDDLTemplate nvarchar(max) = 'If (OBJECT_ID(''{0}.{1}'') is  NULL) create TABLE {0}.{1} ({2}) WITH (DISTRIBUTION = HASH(RecId))'\n\n\ndeclare @ddl nvarchar(max);\n\nset @ddl= (\n\tselect \n\tstring_agg(convert(nvarchar(max), objectDDL ), ';') WITHIN GROUP (ORDER BY ObjectType DESC)\n\tfrom (\n\t\tselect \n\t\t\tObjectType,\n\t\t\tCase \n\t\t\t\twhen ObjectType = 'Entities' then \n\t\t\t\t\t'If (OBJECT_ID(''dbo.'+ EntityName + ''') is  NULL) ' + 'begin try execute sp_executesql N''' +\t\n\t\t\t\t\treplace(replace(replace(replace(replace(replace(replace(ViewDef\n\t\t\t\t\t\t\t\t\t\t, '[dbo].GetValidFromInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, '[dbo].GetValidToInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, 'dbo.GetValidFromInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, 'dbo.GetValidToInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, 'GetValidFromInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, 'GetValidToInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, '''', '''''')\n\t\t\t\t\t+ '''' + ' End Try Begin catch print ERROR_PROCEDURE() + '':'' print ERROR_MESSAGE() end catch'\n\t\t\t\tWhen (ObjectType = 'Tables' or ObjectType = 'ChangeFeed') then \n\t\t\t\t\t'begin try; execute sp_executesql N''' +\n\t\t\t\t\treplace(\n\t\t\t\t\treplace(replace(replace(@CreateTableDDLTemplate, '{0}', @schema), \n\t\t\t\t\t\t\t\t'{1}', EntityName), \n\t\t\t\t\t\t\t\t'{2}', ColumnList),\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t'''', '''''')\n\t\t\t\t\t+ '''' + ' End Try Begin catch print ERROR_PROCEDURE() + '':'' print ERROR_MESSAGE() end catch'\n\t\tEND as ObjectDDL\n\t\tfrom _sqlmetadata\n\t\twhere ObjectType in (select value from string_split(@ObjectTypes, ','))\n\t) ddl\n)\nbegin try \n--select @ddl\nexecute sp_executesql @ddl\nend try\nbegin catch\n   SELECT  \n            @ddl  as DDL\n\t\t\t,ERROR_NUMBER() AS ErrorNumber  \n            ,ERROR_SEVERITY() AS ErrorSeverity  \n            ,ERROR_STATE() AS ErrorState  \n            ,ERROR_PROCEDURE() AS ErrorProcedure  \n            ,ERROR_MESSAGE() AS ErrorMessage;  \nend catch\n\ndeclare @CreateIndexDDL nvarchar(max)= \n(\n\tselect \n\tstring_agg(convert(nvarchar(max),DDL), ';') \n\tfrom \n\t(\n\t\tSelect \n\t\treplace(replace(replace('if not exists (select * from sys.indexes  where object_id=object_id(''{1}'') and name=''{2}'') create index {2} on {1} ({3})'\n\t\t\t\t\t,'{1}', C.TableName)\n\t\t\t\t\t,'{2}', C.TableName + '_NK_IDX')\n\t\t\t\t\t,'{3}', K.KeyColumns) as DDL\n\t\tFrom _ControlTableForCopy C\n\t\tjoin INFORMATION_SCHEMA.TABLES  T \n\t\ton C.TableSchema = T.TABLE_SCHEMA and C.TableName = T.TABLE_NAME and T.TABLE_TYPE = 'BASE TABLE'\n\t\tJoin _sqlmetadata as K\n\t\ton T.TABLE_NAME = K.EntityName and C.Environment = K.Environment and K.KeyColumns != 'RECID'\n\t) X\n\t);\n--select @CreateIndexDDL\nexecute sp_executesql @CreateIndexDDL;\n",
													"type": "Expression"
												}
											}
										],
										"logSettings": {
											"logDestination": "ActivityOutput"
										}
									}
								}
							]
						},
						{
							"value": "SQLTable",
							"activities": [
								{
									"name": "CreateSQLTable",
									"description": "SQL Server endpoint",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "Target_Database",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "declare @environment nvarchar(100) = '@{pipeline().parameters.Environment}';\nDeclare @entity nvarchar(200);\nDeclare @location nvarchar(1000);\nDeclare @Storage nvarchar(1000) = '@{pipeline().parameters.StorageAccount}'\ndeclare @Container nvarchar(1000) = '@{pipeline().parameters.container}'\nDeclare @StorageDS nvarchar(300) = '@{pipeline().parameters.StorageAccount}@{replace(concat(pipeline().parameters.container,'/',pipeline().parameters.Environment), '//','/')}';\n\ndeclare @schema nvarchar(10) = '@{pipeline().parameters.Schema}';\ndeclare @fileFormat nvarchar(100);\ndeclare @ObjectTypes varchar(100) = '@{pipeline().parameters.ObjectTypes}'\ndeclare @TablesPredicate varchar(12) = (select value + '%'  from string_split(@ObjectTypes, ',') where value = 'Tables')\ndeclare @ChangeFeedPredicate varchar(12) = (select value + '%'  from string_split(@ObjectTypes, ',') where value = 'ChangeFeed')\ndeclare @EntitiesPredicate varchar(12) = (select value + '%'  from string_split(@ObjectTypes, ',') where value = 'Entities')\n\nprint('--Metadata prep--');\ndeclare @entities nvarchar(max); \n\nIF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_sqlmetadata]') AND type in (N'U'))\n\tCREATE TABLE [dbo]._sqlmetadata\n\t(\n\t\tFilePath varchar(1000), EntityName varchar(400), DataPath VARCHAR(500), ViewDef varchar(max), ColumnList varchar(max), NameList varchar(max), DataTypeList varchar(max), DataLengthList varchar(max)\n\t)\n\nIF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_ControlTableForCopy]') AND type in (N'U'))\n\tCREATE TABLE [dbo].[_ControlTableForCopy]\n\t(\n\t\t[TableSchema] [varchar](20) NULL,\n\t\t[TableName] [varchar](255) NULL,\n\t\t[StorageAccount] varchar(1000) Null,\n\t\t[Container] varchar(1000) Null,\n\t\t[Environment] varchar(1000) Null,\n\t\t[DataPath] varchar(1000) Null,\n\t\t[DataLocation] [varchar](1000) NULL,\n\t\t[FileFormat]   [varchar](100) NULL,\n\t\t[LastCopyDateTime] [datetime2](7) NULL,\n\t\t[LastCopyMarker] [varchar](255) NULL,\n\t\t[LastCopyStatus] [int] NULL,\n\t\t[LastCopyDuration] [int] NULL,\n\t\t[Incremental] [int] DEFAULT 1,\n\t\t[RefreshInterval] [int] DEFAULT 60,\n\t\t[Active] int DEFAULT 0\n\t)\n\nIF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_dependencies]') AND type in (N'U'))    \n\tcreate table _dependencies\n\t(\n\t\t[EntityName] varchar(500) not null,\n\t\t[DependentTables] varchar(max) Null,\n\t\t[DependentObjects] varchar(max) Null,\n\t\t[MemoFields] varchar(max) Null\n\t)\n\ndeclare @createOrAlterView nvarchar(max) =\n'Create or ALTER   function [dbo].[prepDefinitionScript](@viewDef nvarchar(max), @inputmap varchar(1000))\nreturns nvarchar(max)\nas \nbegin\n\t\n\tset @viewDef = ''execute sp_executesql N'''''' + replace(replace(replace(@viewDef, '''''''', ''''''''''''), ''Create Function'', ''Create OR Alter Function''), ''Create View'', ''Create or alter View'') + '''''''';\n\n\tdeclare @counter int = 1;\n\tdeclare @rowCount int = (select count(1) from string_split(@inputmap, '',''))\n\t\n\tWHILE (@counter <= @rowCount)\n\tBEGIN\n\t\tdeclare @map nvarchar(200) = (select value from   string_split(@inputmap, '','', 1) where ordinal = @counter)  \n\t\tdeclare @ViewColumnName varchar(100)= (select value from string_split(@map,'':'', 1) where ordinal=1);\n\t\tdeclare @TableColumnName varchar(100)= (select value from string_split(@map,'':'', 1) where ordinal=2);\n\t\tDeclare @From varchar(100) = replace(replace(''%T[0-9].{0} AS {1},%'', ''{0}'', @TableColumnName), ''{1}'', @ViewColumnName)\n\t\tdeclare @To   varchar(100) = replace(''AS {1},'', ''{1}'', @ViewColumnName)\n\t\tdeclare @Replace varchar(100) = replace(''Null as {1},'', ''{1}'', @ViewColumnName)\n\n\t\tif (PATINDEX(@From, @ViewDef) >0)\n\t\t\tset @ViewDef = (SELECT \n\t\t\treplace(@ViewDef, \n\t\t\tSUBSTRING(@ViewDef, PATINDEX(@From, @ViewDef),  charIndex(@To, @ViewDef) - PATINDEX(@From, @ViewDef) + len(@to))\n\t\t\t, @Replace))\n\n\t\tset @counter = @counter+ 1;\n\tEND \nreturn @ViewDef\nEnd;'\n\nexecute sp_executesql @createOrAlterView;\n\nIF (isNull(@entity,'') = '') \n\tBEGIN;\n\t\t\n\t\tTruncate table [dbo]._sqlmetadata; \n\n\t\tupdate _cdmmetadata\n\t\tset EntityName = case when FilePath like '%ChangeFeed/%' then '_cdc_' + EntityName else  EntityName end ,\n\t\tDataPath = replace(replace(replace([FilePath], '/resolved/', '/'), '.cdm.json', ''), '-resolved', '') + '/*.csv'\n\t\t\n\t\t\n\t\tSet @entities =(select string_agg(convert(nvarchar(max), EntityName),',')  WITHIN GROUP (ORDER BY DataPath desc)\n\t\tFrom ( select distinct EntityName, DataPath from _cdmmetadata\n\t\t\t\twhere  (FilePath like @TablesPredicate\n\t\t\t\tor FilePath like @EntitiesPredicate\n\t\t\t\tor FilePath like @ChangeFeedPredicate)\n\t\t\t ) x\n\t\t );\n\n\tEND;\n\n\t \n\tinsert into [dbo]._sqlmetadata (FilePath,EntityName, DataPath, ViewDef, ColumnList, NameList, DataTypeList, DataLengthList)\n\tselect \n\t\tx.FilePath,\n\t\tx.EntityName,\n\t\tx.DataPath,\n\t\tx.ViewDef,\n\t\tSTRING_AGG(CONVERT(NVARCHAR(max), + '[' + name + '] ' +  case    \n\t\t\twhen x.dataType = 'nvarchar' and x.maxLength < 0 then 'nvarchar(max)'  \n\t\twhen x.datatype = 'nvarchar' then 'nvarchar(' + convert(nvarchar(10), x.maxLength) + ')'\n\t\twhen x.datatype = 'varbinary' then 'varbinary(' + convert(nvarchar(10), x.maxLength) + ')'\n\t\twhen x.datatype = 'decimal' then 'decimal(32,16)'  \n\t\telse x.datatype end) , ','),  \n\t\tSTRING_AGG(CONVERT(NVARCHAR(max), name), ','),\n\t\tSTRING_AGG(CONVERT(NVARCHAR(max), datatype), ','),\n\t\tSTRING_AGG(CONVERT(NVARCHAR(max), isNull(maxLength, 0)), ',')\n\tfrom ( \n\t\t select \n\t\t\tcase when FilePath  like '%resolved%' then 1 else 0 end resolved,\n\t\t\tFilePath,\n\t\t\tcase \n\t\t\t\twhen FilePath like '%ChangeFeed/%'  then '_cdc_'+  JSON_VALUE(definitions, '$[0].entityName')\n\t\t\t\telse JSON_VALUE(definitions, '$[0].entityName')\n\t\t\tend as EntityName,\n\t\t\treplace(replace(replace([FilePath], '/resolved/', '/'), '.cdm.json', ''), '-resolved', '') + '/*.csv' as DataPath,   \n\t\t\t(Select ISNULL(viewDefinition, viewDefinition1) From  OPENJSON(definitions, '$[0].exhibitsTraits') \n\t\t\t\tWITH (\n\t\t\t\t\ttraitReference NVARCHAR(100) '$.traitReference',\n\t\t\t\t\tviewDefinition nvarchar(max) '$.arguments[0].value',\n\t\t\t\t\tviewDefinition1 nvarchar(max) '$.arguments[0]'\n\t\t\t\t\t)\n\t\t\t\twhere traitReference = 'has.sqlViewDefinition') as ViewDef,\n\t\t\t\tname,   \n\t\t\t\tcase      \n\t\t\t\t\twhen datatype ='guid' then 'UNIQUEIDENTIFIER'  \n\t\t\t\t\twhen lower(name) ='_sysrowid' then 'bigint'\n\t\t\t\t\twhen datatype = 'string' and enum = 'is.constrainedList.wellKnown' then 'int'\n\t\t\t\t\twhen datatype = 'string' then 'nvarchar'\n\t\t\t\t\twhen datatype = 'int32' then 'int'   \n\t\t\t\t\twhen datatype = 'int64' then 'bigInt'    \n\t\t\t\t\twhen datatype = 'boolean' then 'bit'   \n\t\t\t\t\twhen datatype = 'double' then 'real' \n\t\t\t\t\twhen datatype = 'DateTime' then 'DateTime'  \n\t\t\t\t\twhen datatype = 'Time' then 'int'  \n\t\t\t\t\twhen datatype = 'Binary' then 'varbinary' \n\t\t\t\t\twhen datatype is null then 'nvarchar'  \n\t\t\t\t\telse datatype \n\t\t\t\tend as dataType,    \n\t\t\t\tcase \n\t\t\t\t\twhen datatype = 'string' and  maxLength > 4000 then -1\n\t\t\t\t\twhen datatype = 'string' and lower(name) ='lsn' then 60\n\t\t\t\t\twhen datatype = 'string' and lower(name) = 'start_lsn' then 60\n\t\t\t\t\twhen datatype = 'string' and lower(name) = 'seq_val' then 60\n\t\t\t\t\twhen datatype = 'string' and lower(name) = 'dml_action' then 15\n\t\t\t\t\twhen datatype = 'string' and lower(name) = 'update_mask' then 200\n\t\t\t\t\twhen datatype = 'string' and lower(name) = 'createdby' then 20\n\t\t\t\t\twhen datatype = 'string' and lower(name) = 'modifiedby' then 20\n\t\t\t\t\twhen datatype = 'string'  and maxLength is null then 1000\n\t\t\t\t\twhen datatype = 'Binary'  and maxLength is null then 100\n\t\t\t\t\twhen datatype = 'string'  then maxLength \n\t\t\t\tend as maxLength,\n\t\t\t\tenum\n\tFrom _cdmmetadata\n\tcross apply OPENJSON(definitions, '$[0].hasAttributes')  \n\tWITH (name nvarchar(200),  datatype NVARCHAR(50) '$.dataFormat' , maxLength int '$.maximumLength' \n\t,scale int '$.traits[0].arguments[1].value', enum nvarchar(max) '$.appliedTraits[3].traitReference')  \n\t) x\n\tinner join \n\t(\n\tselect max (resolved) as version ,  DataPath\n\tfrom \n\t(\n\t\tselect \n\t\t\treplace(replace(replace([FilePath], '/resolved/', '/'), '.cdm.json', ''), '-resolved', '') + '/*.csv' as DataPath,\n\t\t\tcase when FilePath  like '%resolved%' then 1 else 0 end as resolved\n\t\tfrom _cdmmetadata \n\t\twhere definitions is not null\n\t) z\n\tgroup by  z.DataPath\n\t) y\n\ton x.resolved = y.version and x.datapath = y.datapath\n\twhere FilePath not in (select DISTINCT FilePath from [dbo]._sqlmetadata)\n\tgroup by x.EntityName,x.DataPath,x.ViewDef, x.FilePath\n\n\tINSERT INTO [dbo].[_controltableforcopy](TableSchema,TableName, StorageAccount, Container, Environment , DataPath, DataLocation,FileFormat)\n\tSELECT @schema, EntityName, @Storage, @Container, @Environment, dataPath, @StorageDS + '/' + dataPath, 'CSV' FROM _sqlmetadata\n\twhere FilePath like @TablesPredicate\n\tand NOT EXISTS (SELECT DISTINCT TableName FROM [dbo].[_ControlTableForCopy] WHERE TableSchema = @schema and TableName = EntityName)\n\n\tupdate _ControlTableForCopy \n\t\tset Active = 1 \n\t\twhere TableName in (\n\t\tSELECT \n\t\tdistinct   e.entityName\n\t\tFROM [dbo].[_cdmmetadata]\n\t\tcross apply OpenJSON([entities]) \n\t\tWith (entityName nvarchar(300)) e\n\t\twhere entities is not null\n\t\tand FilePath like 'Tables/%')\n\nprint('Entities:' + @entities );\n\nDECLARE @counter int = 1\nDECLARE @recordCount int = (select count(value) from string_split(@entities, ',', 1) )\n\nprint ('EntityCount:' + convert(varchar(10), @recordCount));\nprint ('-- Loop through entities');\n\nDeclare @CreateObjectDDL nvarchar(max);\n\nWHILE @counter <= @recordCount \nBEGIN \n\tdeclare @view int = 0;\n\tdeclare @ViewDefinition nvarchar(max);\n\tdeclare @ColumnList varchar(max)\n\n\tselect top 1 @entity = EntityName, @ViewDefinition = ViewDef, @location = DataPath, @ColumnList = ColumnList\n\t\tFrom _sqlmetadata\n\t\twhere EntityName = (select value from string_split(@entities, ',', 1) where ordinal = @counter);\n\t\n\tPRINT ('Counter:' + convert(varchar(10), @counter));\n\tPRINT ('Entity:' + @entity);\n\tPRINT ('DataLocation:' + @location);\n\t\n\tSET @counter = @counter + 1\n\t\n\tIF (isNull(@ViewDefinition,'') <> '')\n\tBEGIN;  \n\t\tset @view = 1;\n\n\t\tIF EXISTS (Select  1  from  _dependencies where entityName = @entity )\n\t\tBEGIN;\n\t\t\tSET @CreateObjectDDL = \n\t\t\t(\n\t\t\t\tSelect \n\t\t\t\t\tSTRING_AGG(convert(nvarchar(max), \n\t\t\t\t\tx.DDL\n\t\t\t\t\t), ';' + Char(10)) \n\t\t\t\t\tFrom \n\t\t\t\t\t( \n\t\t\t\t\t\tSelect\t\n\t\t\t\t\t\t\t0 as #,\n\t\t\t\t\t\t\t'execute sp_executesql N''create or alter View dbo.' + TableName + ' AS Select ' + STRING_AGG(convert(nvarchar(max), ' Null as ' + COLUMN_NAME), ',') + '''' as DDL\n\t\t\t\t\t\tFrom _dependencies\n\t\t\t\t\t\tcross apply OpenJson(DependentTables) with (TableName varchar(100), Attributes nvarchar(max) as Json) as T\n\t\t\t\t\t\tcross apply OPENJSON(T.Attributes)   with (COLUMN_NAME varchar(100))\n\t\t\t\t\t\twhere TableName not in (Select TABLE_NAME from INFORMATION_SCHEMA.TABLES)\n\t\t\t\t\t\t\tand entityName = @entity\n\t\t\t\t\t\tgroup by TableName\n\t\t\t\t\t\t\n\t\t\t\t\t\tunion \n\t\t\t\t\t\t\n\t\t\t\t\t\tSELECT \n\t\t\t\t\t\t\tROW_NUMBER() Over(ORDER BY (SELECT 100)) as #,\n\t\t\t\t\t\t\tdbo.prepDefinitionScript(definition,MemoFields) as DDL\n\t\t\t\t\t\tFROM [dbo].[_dependencies]\n\t\t\t\t\t\tCross apply openjson(DependentObjects)\n\t\t\t\t\t\tWITH (objectName nvarchar(200),  type NVARCHAR(50) , definition nvarchar(max))\n\t\t\t\t\t\twhere entityName = @entity\n\t\t\t\t\t) x\n\t\t\t);\n\t\tEND;\n\t\tELSE \n\t\t\n\t\tBEGIN;\n\t\t\tSET @CreateObjectDDL = replace(@ViewDefinition, 'Create View', 'Create or Alter View')\n\t\tEND;\n\tEND;\n\n\tIF (@view = 0)\n\tBEGIN;\n\t\tdeclare @CreateTableTemplate nvarchar(max) = 'If (OBJECT_ID(''{0}.{1}'') is  NULL) CREATE Table {0}.{1} ({2},CONSTRAINT PK_{1}_RecIdx PRIMARY KEY CLUSTERED (RecId))'\n\t\tset @CreateObjectDDL = replace(replace(replace(@CreateTableTemplate, '{0}', @schema), '{1}', @entity), '{2}', @ColumnList) ;\n\t\n\tEND;\n\t\t\n\tbegin try\n\t\texecute sp_executesql @CreateObjectDDL;\n\tend try\n\tbegin catch;\n\t\tprint  (ERROR_MESSAGE());  \n\t\tprint (@CreateObjectDDL)\n\tend catch;\n\n\tset @entity = null;\nEND;\n-- Create Index\ndeclare @CreateIndexDDL nvarchar(max)= \n(\n\tselect \n\tstring_agg(convert(nvarchar(max),DDL), ';') \n\tfrom \n\t(\n\t\tSelect \n\t\treplace(replace(replace('if not exists (select * from sysindexes  where id=object_id(''{1}'') and name=''{2}'') create index {2} on {1} ({3})'\n\t\t\t\t\t,'{1}', C.TableName)\n\t\t\t\t\t,'{2}', C.TableName + '_NK_IDX')\n\t\t\t\t\t,'{3}', K.KeyColumn) as DDL\n\t\tFrom _ControlTableForCopy C\n\t\tjoin INFORMATION_SCHEMA.TABLES  T \n\t\ton C.TableSchema = T.TABLE_SCHEMA and C.TableName = T.TABLE_NAME and T.TABLE_TYPE = 'BASE TABLE'\n\t\tJoin \n\t\t(\n\t\t\tselect distinct TableName as TableName,\n\t\t\t\tstring_agg(convert(nvarchar(max),COLUMN_NAME), ',') WITHIN GROUP (ORDER BY [Key] ASC)  as KeyColumn\n\t\t\t\tFrom _dependencies\n\t\t\t\tcross apply OpenJson(DependentTables) with (TableName varchar(100), Attributes nvarchar(max) as Json) as T\n\t\t\t\tcross apply OPENJSON(T.Attributes)   with (COLUMN_NAME varchar(100), [KEY] int)\n\t\t\t\twhere  [KEY] is not Null and COLUMN_NAME != 'RECID'\n\t\t\t\tgroup by EntityName, TableName\n\t\t) K\n\t\ton T.TABLE_NAME = K.TableName\n\t) X\n\t);\nexecute sp_executesql @CreateIndexDDL;",
													"type": "Expression"
												}
											}
										],
										"logSettings": {
											"logDestination": "ActivityOutput"
										}
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "CreateSynapse_ViewOrExternalTable",
							"description": "Create View or External Table on Synapse Serverless Database",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "CreateMetadataView",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "Target_Database",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": {
											"value": "-- Common variables \ndeclare @schema nvarchar(10) = '@{pipeline().parameters.Schema}';\ndeclare @ObjectTypes varchar(100) = '@{pipeline().parameters.ObjectTypes}'\n\n-- Serverless specific variables\ndeclare @datasource nvarchar(200) = '@{pipeline().parameters.Environment}';\ndeclare @parserVersion nvarchar(10) = '@{pipeline().parameters.ParserVersion}';\ndeclare @readOption nvarchar(300) = N'''{\"READ_OPTIONS\":[\"ALLOW_INCONSISTENT_READS\"]}''';\ndeclare @ddlType nvarchar(20) = '@{pipeline().parameters.DDLType}';\ndeclare @dateTimeFunct nvarchar(50) = 'SYSUTCDATETIME()';\ndeclare @fileFormat nvarchar(100);\t\n\nIF (@parserVersion = '2.0')\n\tSET @fileFormat = '_CSV_P2';\nELSE \n\tSET @fileFormat = '_CSV_P1';\n\ndeclare @CreateExternalTableDDL nvarchar(max) = 'If (OBJECT_ID(''{0}.{1}'') IS NOT  NULL) \tDrop external table  {0}.{1}  \n\t\t\t\tCREATE external Table {0}.{1} ({2}) WITH ( LOCATION = ''{3}'', DATA_SOURCE = [{4}], FILE_FORMAT = [{5}], TABLE_OPTIONS ={6})';\ndeclare @CreateViewDDL nvarchar(max) = 'CREATE OR ALTER VIEW  {0}.{1}  AS SELECT cast(r.filepath(1) as varchar(100)) as [$FileName], * FROM  OPENROWSET( BULK ''{3}'',  FORMAT = ''CSV'', \n\t\t\t\tPARSER_VERSION = ''{4}'', DATA_SOURCE = ''{5}'', ROWSET_OPTIONS ={6}) WITH ({2}) as r';\n\n\ndeclare @ddl nvarchar(max);\n\nset @ddl= (\n\tselect \n\tstring_agg(convert(nvarchar(max), objectDDL ), ';') WITHIN GROUP (ORDER BY ObjectType DESC, Ordinal ASC)\n\tfrom (\n\t\tselect \n\t\t\tObjectType,\n\t\t\tOrdinal,\n\t\t\tCase \n\t\t\t\twhen ObjectType = 'Entities' then \n\t\t\t\t\t'begin try execute sp_executesql N''' +\t\n\t\t\t\t\treplace(replace(replace(replace(replace(replace(replace(replace(ViewDef\n\t\t\t\t\t\t\t\t\t\t, '[dbo].GetValidFromInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, '[dbo].GetValidToInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, 'dbo.GetValidFromInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, 'dbo.GetValidToInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, 'GetValidFromInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t, 'GetValidToInContextInfo()', @dateTimeFunct)\n\t\t\t\t\t\t\t\t\t\t,'Create View', 'Create or alter View')\n\t\t\t\t\t\t\t\t\t\t, '''', '''''')\n\t\t\t\t\t+ '''' + ' End Try Begin catch print ERROR_PROCEDURE() + '':'' print ERROR_MESSAGE() end catch'\n\t\t\t\tWhen (ObjectType = 'Tables' or ObjectType = 'ChangeFeed')  and @ddlType = 'SynapseExternalTable' then \n\t\t\t\t\t'execute sp_executesql N''' +\n\t\t\t\t\treplace(\n\t\t\t\t\treplace(replace(replace(replace(replace(replace(replace(@CreateExternalTableDDL, '{0}', @schema), \n\t\t\t\t\t\t\t\t'{1}', EntityName), \n\t\t\t\t\t\t\t\t'{2}', case when @parserVersion = '1.0' then ColumnListP1 else ColumnListP2 end),\n\t\t\t\t\t\t\t\t'{3}', DataPath),\n\t\t\t\t\t\t\t\t'{4}', @datasource),\n\t\t\t\t\t\t\t\t'{5}', @fileFormat), \n\t\t\t\t\t\t\t\t'{6}', @readOption),\n\t\t\t\t\t'''', '''''')\n\t\t\t\t\t+ ''''\n\t\t\t\tWhen (ObjectType = 'Tables' or ObjectType = 'ChangeFeed')   and @ddlType = 'SynapseView' Then \n\t\t\t\t\t'execute sp_executesql N''' +\n\t\t\t\t\treplace(\n\t\t\t\t\treplace(replace(replace(replace(replace(replace(replace(@CreateViewDDL, \n\t\t\t\t\t\t\t'{0}',@schema),\n\t\t\t\t\t\t\t'{1}', EntityName), \n\t\t\t\t\t\t\t'{2}', case when @parserVersion = '1.0' then ColumnListP1 else ColumnListP2 end), \n\t\t\t\t\t\t\t'{3}', DataPath), \n\t\t\t\t\t\t\t'{4}', @parserVersion), \n\t\t\t\t\t\t\t'{5}', @datasource), \n\t\t\t\t\t\t\t'{6}', @readOption) ,\n\t\t\t\t\t'''', '''''')\n\t\t\t\t\t+ ''''\n\t\tEND as ObjectDDL\n\t\tfrom _sqlmetadata\n\t\twhere ObjectType in (select value from string_split(@ObjectTypes, ','))\n\t) ddl\n)\nbegin try \n--select @ddl\nexecute sp_executesql @ddl\nend try\nbegin catch\n   SELECT  \n            @ddl  as DDL\n\t\t\t,ERROR_NUMBER() AS ErrorNumber  \n            ,ERROR_SEVERITY() AS ErrorSeverity  \n            ,ERROR_STATE() AS ErrorState  \n            ,ERROR_PROCEDURE() AS ErrorProcedure  \n            ,ERROR_MESSAGE() AS ErrorMessage;  \nend catch\n",
											"type": "Expression"
										}
									}
								],
								"logSettings": {
									"logDestination": "ActivityOutput"
								}
							}
						},
						{
							"name": "CreateMetadataView",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "Target_Database",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "declare @dependency bit = @{if(equals(pipeline().parameters.GetDependency,false),0,1)};\ndeclare @environment nvarchar(100) = '@{pipeline().parameters.Environment}';\nDeclare @StorageDS nvarchar(300) = '@{pipeline().parameters.StorageAccount}@{replace(concat(pipeline().parameters.container,'/',pipeline().parameters.Environment), '//','/')}';\n\nDeclare @CreateCredentials nvarchar(max) =  'IF NOT EXISTS(select * from sys.database_credentials where name = '''+@environment+''')\n    CREATE DATABASE SCOPED CREDENTIAL [' +@environment+'] WITH IDENTITY=''Managed Identity''';\n\nexecute sp_executesql  @CreateCredentials;\n\nDeclare @CreateExternalDataSource nvarchar(max) =  'IF NOT EXISTS(select * from sys.external_data_sources where name = '''+ @environment+''')\n        CREATE EXTERNAL DATA SOURCE [' +@environment+'] WITH (\n            LOCATION = '''+ @StorageDS +''',\n            CREDENTIAL = [' + @environment + '])'\nexecute sp_executesql  @CreateExternalDataSource;\n\nIF NOT EXISTS(select * from sys.external_file_formats  where name = '_CSV_P1')\n    CREATE EXTERNAL FILE FORMAT _CSV_P1\n    WITH (  \n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS ( FIELD_TERMINATOR = ',', STRING_DELIMITER = '\"', FIRST_ROW = 1, USE_TYPE_DEFAULT = true)\n    );\n\nIF NOT EXISTS(select * from sys.external_file_formats  where name = '_CSV_P2')\n    CREATE EXTERNAL FILE FORMAT _CSV_P2\n    WITH (  \n        FORMAT_TYPE = DELIMITEDTEXT,\n        FORMAT_OPTIONS ( FIELD_TERMINATOR = ',', STRING_DELIMITER = '\"', FIRST_ROW = 1, PARSER_VERSION = '2.0' )\n\t\t);\n\nIF NOT EXISTS(select * from sys.external_file_formats  where name = '_parquet')\n    CREATE EXTERNAL FILE FORMAT _parquet\n    WITH (  \n        FORMAT_TYPE = Parquet\n\t\t);\n\nEXEC('CREATE OR ALTER  VIEW [dbo].[_cdmmetadata] \nAS\nwith _cdm AS\n( Select \n\t\t[definitions],\n\t\t[FilePath] ,\n\t\t[Environment],\n\t\t[entities], \n\t\treplace(replace(replace([FilePath], ''/resolved/'', ''/''), ''.cdm.json'', ''''), ''-resolved'', '''') + ''/*.csv'' as DataPath,\n\t\tcase when FilePath  like ''%resolved%'' then 1 else 0 end as resolved,\n\t\tcase \n\t\t\twhen FilePath like ''%ChangeFeed/%''  then ''_cdc_''+  JSON_VALUE(definitions, ''$[0].entityName'')\n\t\t\telse JSON_VALUE(definitions, ''$[0].entityName'')\n\t\tend as EntityName\n\tfrom Openrowset ( Bulk ''/metadata.parquet'', Format = ''Parquet'', DATA_SOURCE = ''@{pipeline().parameters.Environment}'')\n \tWITH ( [definitions] [varchar](max),\n\t\t[FilePath] [varchar](1000),\n\t\t[Environment]   [varchar](1000),\n\t\t[entities] varchar(max)\n\n\t) as r\n\twhere definitions is not null\n)\nselect \nROW_NUMBER() OVER (ORDER BY FilePath DESC) as Id,\nx.[definitions],\nx.[FilePath] ,\nx.[Environment],\nx.[entities], \nx.DataPath,\nSUBSTRING (x.DataPath,0,CHARINDEX(''/'',x.DataPath)) as ObjectType,\nx.EntityName,\nx.resolved\n from _cdm x\ninner join \n(\n\tselect max (resolved) as resolved ,  DataPath\n\tfrom _cdm \n\tgroup by DataPath\n) y\non x.resolved = y.resolved and x.dataPath = y.datapath;')\n\n\nIF OBJECT_ID('dbo._dependency') IS NULL\nEXEC('CREATE view  [dbo].[_dependency] as SELECT \n\t\tcast(null as nvarchar(100)) as ParentEntity,\n\t\tcast(null as nvarchar(1000)) as EntityName,\n\t\tcast(null as nvarchar(100)) as ObjectType,\n\t\tcast(null as nvarchar(max)) as ColumnListP1,\n\t\tcast(null as nvarchar(max)) as ColumnListP2,\n\t\tcast(null as nvarchar(4000)) as DataPath,\n\t\tcast(null as nvarchar(max)) as ViewDef,\n\t\tcast(null as nvarchar(max)) as MemoFields')  \n\t\t\nIF (@dependency =1) \nEXEC('CREATE OR ALTER view  [dbo].[_dependency] as\nSELECT \t\n\t\tEntityName as ParentEntity,\n\t\tObjectName as EntityName,\n\t\t''Entities'' as ObjectType,\n\t\t'''' as ColumnListP1,\n\t\t'''' as ColumnListP2,\n\t\t'''' as DataPath,\n\t\t[definition] as ViewDef,\n\t\t[MemoFields]\n\tFROM Openrowset ( Bulk ''/dependencies.parquet'', Format = ''Parquet'', DATA_SOURCE = ''@{pipeline().parameters.Environment}'')\n\tWITH \n\t(\n\t\t[EntityName] varchar(500),\n\t\t[DependentTables] varchar(max) ,\n\t\t[DependentObjects] varchar(max) ,\n\t\t[MemoFields] varchar(max) \n\t) as r\n\tCross apply openjson(DependentObjects)\n\tWITH \n\t(\n\t\tobjectName nvarchar(200),  \n\t\ttype NVARCHAR(50), \n\t\tdefinition nvarchar(max)\n\t)\n\twhere \n\ttype = ''view''\n\tand EntityName != ObjectName\n\tand EntityName in (select distinct entityName from _cdmmetadata)')\n\n\nIF OBJECT_ID('dbo._viewreplacement') IS NULL\nEXEC('CREATE view  [dbo].[_viewreplacement] as SELECT \n\t'''' AS ViewName,\n\t'''' AS S1,\n\t'''' AS R1,\n\t'''' AS S2,\n\t'''' AS R2,\n\t'''' AS S3,\n\t'''' AS R3,\n\t'''' AS S4,\n\t'''' AS R4,\n\t'''' AS S5,\n\t'''' AS R5')  \nbegin try\nExec ('Create or Alter View  _viewreplacement\nAS\nWITH  \nViewReplacementDefinition\nAS\n(\n    SELECT   \n    \t\t ROW_NUMBER() OVER ( PARTITION BY  [ViewName] ORDER BY (SELECT NULL)) as [ReplacementIndex]\n\t\t\t ,[SearchText]\n             ,[ReplacementText]\n             ,[ViewName]\n\t\t\t from Openrowset ( Bulk ''/ReplaceViewSyntax.json'', Format = ''CSV'', DATA_SOURCE = ''@{pipeline().parameters.Environment}''\n\t\t\t\t,fieldterminator =''0x0b'',\n\t\t\t\tfieldquote = ''0x0b'',\n\t\t\t\trowterminator = ''0x0b'' \n\t\t\t\t) with (doc nvarchar(max)) as rows\n\t\t\tCROSS APPLY OPENJSON([doc])            \n\t\t\tWITH (    [SearchText] NVARCHAR(MAX) ''$.Key''\n    \t\t\t\t, [ReplacementText] NVARCHAR(MAX) ''$.Value'' \n    \t\t\t\t, [ViewName] NVARCHAR(110) ''$.ViewName'' \n\t\t\t)\n)\n\nSELECT S.ViewName,\n\tisnull(S1, '''') AS S1,\n\tisnull(R1, '''') AS R1,\n\tisnull(S2, '''') AS S2,\n\tisnull(R2, '''') AS R2,\n\tisnull(S3, '''') AS S3,\n\tisnull(R3, '''') AS R3,\n\tisNull(S4, '''') AS S4,\n\tisNull(R4, '''') AS R4,\n\tisnull(S5, '''') AS S5,\n\tisnull(R5, '''') AS R5\nFROM (\n\tSELECT ViewName,\n\t\t[1] AS S1,\n\t\t[2] AS S2,\n\t\t[3] AS S3,\n\t\t[4] AS S4,\n\t\t[5] AS S5\n\tFROM (\n\t\tSELECT ViewName,\n\t\t\tSearchText,\n\t\t\t[ReplacementIndex]\n\t\tFROM ViewReplacementDefinition\n\t\t) p\n\tPIVOT(MIN([SearchText]) FOR [ReplacementIndex] IN (\n\t\t\t\t[1],\n\t\t\t\t[2],\n\t\t\t\t[3],\n\t\t\t\t[4],\n\t\t\t\t[5]\n\t\t\t\t)) AS ReplaceOldStringPivot\n\t) S\nJOIN (\n\tSELECT ViewName,\n\t\t[1] AS R1,\n\t\t[2] AS R2,\n\t\t[3] AS R3,\n\t\t[4] AS R4,\n\t\t[5] AS R5\n\tFROM (\n\t\tSELECT ViewName,\n\t\t\t[ReplacementText],\n\t\t\t[ReplacementIndex]\n\t\tFROM ViewReplacementDefinition\n\t\t) p\n\tPIVOT(MIN([ReplacementText]) FOR [ReplacementIndex] IN (\n\t\t\t\t[1],\n\t\t\t\t[2],\n\t\t\t\t[3],\n\t\t\t\t[4],\n\t\t\t\t[5]\n\t\t\t\t)) AS ReplaceNewStringPivot\n\t) R\n\tON S.ViewName = R.ViewName')\nend try\nbegin catch\nprint ('view replacement is not created')\nend catch\n\nExec('create or alter view _sqlmetadata \nas \nselect distinct\n\tfinal.EntityName,\n\tfinal.ObjectType,\t\n\tfinal.ColumnListP1,\n\tfinal.ColumnListP2,\n\tfinal.DataPath,\n\tfinal.ViewDef,\n\t1 as Ordinal\n\tfrom \n\t\t(\n\t\t\tselect \n\t\t\t\tx.EntityName,\n\t\t\t\tx.DataPath,\n\t\t\t\t\treplace(replace(replace(x.ViewDef ,isNull(vr.S1, ''''), isNull(vr.R1,'''')), isnull(vr.S2, ''''), isnull(vr.R2,'''')),isnull(vr.S3, ''''), isnull(vr.R3, '''')) as ViewDef,\n\t\t\t\tx.ObjectType,\n\t\t\t\tcase \n\t\t\t\t\twhen x.ObjectType = ''ChangeFeed'' and  x.ViewDef is not null then 0 \n\t\t\t\t\telse 1 \n\t\t\t\tend as IsValid,\n\t\t\t\tSTRING_AGG(CONVERT(NVARCHAR(max), + ''['' + name + ''] '' +  \n\t\t\t\tcase    \n\t\t\t\t\twhen x.dataType = ''nvarchar'' and x.maxLength < 0  then ''nvarchar(max)''   \n\t\t\t\t\twhen x.datatype = ''nvarchar'' then ''nvarchar('' + convert(nvarchar(10), x.maxLength) + '')''\n\t\t\t\t\twhen x.datatype = ''varbinary'' then ''varbinary('' + convert(nvarchar(10), x.maxLength) + '')''\n\t\t\t\t\twhen x.datatype = ''decimal'' then ''decimal(32,16)''  \n\t\t\t\t\telse x.datatype\n\t\t\t\tend) , '','') WITHIN GROUP (ORDER BY ordinal ASC) as ColumnListP1,\n\t\t\t\tSTRING_AGG(CONVERT(NVARCHAR(max), + ''['' + name + ''] '' +  \n\t\t\t\tcase    \n\t\t\t\t\twhen x.dataType = ''nvarchar'' and x.maxLength < 0  then ''nvarchar(8000)''   \n\t\t\t\t\twhen datatype = ''DateTime'' then ''DateTime2''  \n\t\t\t\t\twhen x.datatype = ''nvarchar'' then ''nvarchar('' + convert(nvarchar(10), x.maxLength) + '')''\n\t\t\t\t\twhen x.datatype = ''varbinary'' then ''varbinary('' + convert(nvarchar(10), x.maxLength) + '')''\n\t\t\t\t\twhen x.datatype = ''decimal'' then ''decimal(32,16)''  \n\t\t\t\t\telse x.datatype\n\t\t\t\tend) , '','') WITHIN GROUP (ORDER BY ordinal ASC) as ColumnListP2\n\t\t\tfrom \n\t\t\t( \n\t\t\t\tselect \n\t\t\t\t\tFilePath,\n\t\t\t\t\tEntityName,\n\t\t\t\t\tObjectType,\n\t\t\t\t\tDataPath,   \n\t\t\t\t\t(Select ISNULL(viewDefinition, viewDefinition1)\n\t\t\t\t\t\tFrom  OPENJSON(definitions, ''$[0].exhibitsTraits'') \n\t\t\t\t\t\tWITH (\n\t\t\t\t\t\ttraitReference NVARCHAR(100) ''$.traitReference'',\n\t\t\t\t\t\tviewDefinition nvarchar(max) ''$.arguments[0].value'',\n\t\t\t\t\t\tviewDefinition1 nvarchar(max) ''$.arguments[0]''\n\t\t\t\t\t\t)where traitReference = ''has.sqlViewDefinition'') as ViewDef,\n\t\t\t\t\tname,   \n\t\t\t\t\tcase      \n\t\t\t\t\t\twhen datatype =''guid'' then ''UNIQUEIDENTIFIER''  \n\t\t\t\t\t\twhen lower(name) =''_sysrowid'' then ''bigint''\n\t\t\t\t\t\twhen datatype = ''string'' and enum = ''is.constrainedList.wellKnown'' then ''int''\n\t\t\t\t\t\twhen datatype = ''string'' then ''nvarchar''\n\t\t\t\t\t\twhen datatype = ''int32'' then ''int''   \n\t\t\t\t\t\twhen datatype = ''int64'' then ''bigInt''    \n\t\t\t\t\t\twhen datatype = ''boolean'' then ''bit''   \n\t\t\t\t\t\twhen datatype = ''double'' then ''real'' \n\t\t\t\t\t\twhen datatype = ''Time'' then ''int''  \n\t\t\t\t\t\twhen datatype = ''Binary'' then ''varbinary''  \n\t\t\t\t\t\telse datatype \n\t\t\t\t\tend as dataType,    \n\t\t\t\t\tcase \n\t\t\t\t\t\twhen datatype = ''string'' and  maxLength > 4000 then -1\n\t\t\t\t\t\twhen datatype = ''string'' and lower(name) =''lsn'' then 60\n\t\t\t\t\t\twhen datatype = ''string'' and lower(name) = ''start_lsn'' then 60\n\t\t\t\t\t\twhen datatype = ''string'' and lower(name) = ''seq_val'' then 60\n\t\t\t\t\t\twhen datatype = ''string'' and lower(name) = ''dml_action'' then 15\n\t\t\t\t\t\twhen datatype = ''string'' and lower(name) = ''update_mask'' then 200\n\t\t\t\t\t\twhen datatype = ''string'' and lower(name) = ''createdby'' then 20\n\t\t\t\t\t\twhen datatype = ''string'' and lower(name) = ''modifiedby'' then 20\n\t\t\t\t\t\twhen datatype = ''string''  and maxLength is null then 1000\n\t\t\t\t\t\twhen datatype = ''Binary''  and maxLength is null then 100\n\t\t\t\t\t\twhen datatype = ''string''  then maxLength \n\t\t\t\t\tend as maxLength,\n\t\t\t\t\tenum,\n\t\t\t\t\tordinal\n\t\t\t\tfrom _cdmmetadata \n\t\t\t\tcross apply OPENJSON(definitions, ''$[0].hasAttributes'')  \n\t\t\t\t\tWITH (name nvarchar(200),  datatype NVARCHAR(50) ''$.dataFormat'' , maxLength int ''$.maximumLength'' ,  ordinal int ''$.sql:identity()''\n\t\t\t\t\t,scale int ''$.traits[0].arguments[1].value'', enum nvarchar(max) ''$.appliedTraits[3].traitReference'')  \n\t\t) x\n\t\tleft outer join _viewreplacement vr on vr.ViewName = x.EntityName\n\t\tgroup by x.EntityName,x.objectType, x.DataPath,x.ViewDef, x.FilePath, S1, R1, S2, R2, S3, R3\n\t) final\n\twhere final.IsValid = 1\n\t\n\tunion\n\t\n\tSELECT \t\n\t\tEntityName,\n\t\tObjectType,\n\t\tColumnListP1,\n\t\tColumnListP2,\n\t\tDataPath,\n\t\tViewDef,\n\t\t0 as Ordinal\n\tfrom _dependency\n\twhere EntityName is not null\n\tgroup by viewDef, ObjectType, EntityName, ColumnListP1, ColumnListP2, DataPath;')\n\n\n",
											"type": "Expression"
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "SQLTarget_CopyMetadata",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "CopyMetadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(pipeline().parameters.DDLType,'SQLTable')",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "CopyMetadata_SQL",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"preCopyScript": {
										"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_cdmmetadata]') AND type in (N'U'))\n    Drop Table _cdmmetadata\n    \ncreate table _cdmmetadata\n(\n    [definitions] [varchar](max) NULL,\n    [FilePath] [varchar](1000) NULL,\n    [Environment]   [varchar](1000) NULL,\n    [entities] varchar(max) Null,\n    [EntityName] varchar(500) null,\n    [DataPath] varchar(1000) Null\n)",
										"type": "Expression"
									},
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "CDMUtil_Metadata_File_Dataset",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@pipeline().parameters.container",
											"type": "Expression"
										},
										"folder": {
											"value": "@pipeline().parameters.Environment",
											"type": "Expression"
										},
										"StorageAccount": {
											"value": "@pipeline().parameters.StorageAccount",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "CDMUtil_SQLTable_Dataset",
									"type": "DatasetReference",
									"parameters": {
										"TableName": {
											"value": "_cdmmetadata",
											"type": "Expression"
										},
										"DbName": {
											"value": "@pipeline().parameters.DbName",
											"type": "Expression"
										},
										"DBServer": {
											"value": "@pipeline().parameters.DbServer",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "GetAXDBDependency",
				"description": "If AXDB is provided, copy dependency from AXDB to file .. otherwise check if the dependency file exists",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@pipeline().parameters.GetDependency",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Dependency",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "CDMUtil_DependencyFile_Dataset",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@pipeline().parameters.container",
											"type": "Expression"
										},
										"folder": {
											"value": "@pipeline().parameters.Environment",
											"type": "Expression"
										},
										"StorageAccount": {
											"value": "@pipeline().parameters.StorageAccount",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"exists"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "CopyEntityDependencies",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "-----------------------------------------------BEGIN Recursive section ---------------------------------------\ndrop table if exists #myEntitiestree;\nDeclare @entities nvarchar(max)= '@{pipeline().parameters.EntityListForDependency}';\nWith allviews (nodeId, parentNodeId, nodeIdType, rootNode, depth) AS (\n-- 1 Anchor member - represents the list of root nodes considered with a depth of 0\t\n\tselect nv.name as nodeId,\n       CAST(null as NVARCHAR(MAX)) as parentNodeId,\n       CAST('VIEW' as nvarchar(60)) COLLATE DATABASE_DEFAULT as nodeIdType,\n\t   nv.name as rootNode,\n\t   0 as depth\n\tfrom sys.views nv\n\twhere schema_name(nv.schema_id) = 'dbo' \n\tAND nv.name in (select value from string_split(@entities, ','))\n\tunion all\n-- 2 recursive member - represents the iteration path to navigate from a node to its parent\n--increases depth by 1 at each iteration and keeps a trace of the initial root node from the anchor member \n\tselect o.name as nodeId,\n       CAST(p.name as NVARCHAR(Max)) as parentNodeId,\n       o.type_desc COLLATE DATABASE_DEFAULT as nodeIdType,\n\t   allviews.rootNode as rootnode,\n\t   allviews.depth + 1 as depth\n\tfrom sys.sql_expression_dependencies d\n\tjoin sys.objects o\n\t\t\ton o.object_id = d.referenced_id\n\tjoin sys.objects p\n\t\t\ton p.object_id = d.referencing_id\n\tjoin allviews on allviews.nodeId = p.name\n\twhere \n\td.referenced_id is not null and \n-- 3 ending condition\n\tp.type_desc = 'VIEW' and\n\tschema_name(p.schema_id) = 'dbo' and schema_name(o.schema_id) = 'dbo'\n)\n--4 inserts the results in a temporary table for ease of use\nSelect * into #myEntitiestree from allviews ;\n\nSELECT  \n\trootNode as EntityName,\n\t(select \n\t\t\tnodeId as TableName,\n\t\t\t(select C.COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, K.ORDINAL_POSITION as [KEY]\n\t\t\t\tfrom INFORMATION_SCHEMA.COLUMNS C\n\t\t\t\tleft join   INFORMATION_SCHEMA.KEY_COLUMN_USAGE K\n\t\t\t\ton C.TABLE_SCHEMA = K.TABLE_SCHEMA and C.Table_Name = K.Table_Name and C.COLUMN_NAME = K.COLUMN_NAME\n\t\t\t\twhere  C.TABLE_SCHEMA = 'dbo' and C.TABLE_NAME = x.nodeId\n\t\t\t\torder by C.ORDINAL_POSITION ASC\n\t\t\t\tFor JSON Path\n\t\t\t) as Attributes\n\t\tfrom #myEntitiestree x\n\t\twhere nodeIdType = 'USER_TABLE' and x.rootNode = parent.rootNode\n\t\tgroup by nodeId \n\t\tFor JSON Path\n\t) \n\tas DependentTables,\n    (SELECT \n\t\tnodeId as objectName,\n\t\to.type_desc as [type],\n\t\tm.definition as [definition]\n\tFROM #myEntitiestree child\n\tjoin sys.objects o\n\t\ton o.schema_id = schema_id('dbo')\n\t\tand o.name COLLATE DATABASE_DEFAULT = child.nodeId COLLATE DATABASE_DEFAULT \n\t\tand o.type_desc COLLATE DATABASE_DEFAULT =  nodeIdType COLLATE DATABASE_DEFAULT\n\tleft outer join sys.sql_modules m\n\t\ton m.object_id = o.object_id  \n    WHERE \n\t\tparent.rootNode = child.RootNode \n\t\tand nodeIdType in ('VIEW', 'SQL_SCALAR_FUNCTION')\n\t\torder by nodeIdType asc, depth desc\n        FOR JSON PATH\n\t) AS DependentObjects,\n\t(SELECT  \n\t\tstring_agg(convert(nvarchar(max), name + ':' + source_column), ',') \n\t\tFROM   sys.dm_exec_describe_first_result_set (N'SELECT * from dbo.'+ rootNode , null, 1) \n\t\twhere max_length <0\n\t) as MemoFields\nFROM #myEntitiestree parent \ngroup by parent.rootNode\norder by rootNode asc",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "CDMUtil_AXDB_Dataset",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "CDMUtil_DependencyFile_Dataset",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@pipeline().parameters.container",
											"type": "Expression"
										},
										"folder": {
											"value": "@pipeline().parameters.Environment",
											"type": "Expression"
										},
										"StorageAccount": {
											"value": "@pipeline().parameters.StorageAccount",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "SQLTarget_CopyDependency",
				"description": "Copy dependencies file to sql table",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "GetAXDBDependency",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(pipeline().parameters.DDLType,'SQLTable'), or(pipeline().parameters.GetDependency, equals(activity('Dependency').output.exists,true)))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "CopyDependenciesData",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "ParquetSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									}
								},
								"sink": {
									"type": "AzureSqlSink",
									"preCopyScript": {
										"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[_dependencies]') AND type in (N'U'))\n    Drop Table _dependencies\n    \ncreate table _dependencies\n(\n    [EntityName] varchar(500) not null,\n    [DependentTables] varchar(max) Null,\n    [DependentObjects] varchar(max) Null,\n    [MemoFields] varchar(max) Null\n)",
										"type": "Expression"
									},
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false,
									"disableMetricsCollection": false
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "CDMUtil_DependencyFile_Dataset",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@pipeline().parameters.container",
											"type": "Expression"
										},
										"folder": {
											"value": "@pipeline().parameters.Environment",
											"type": "Expression"
										},
										"StorageAccount": {
											"value": "@pipeline().parameters.StorageAccount",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "CDMUtil_SQLTable_Dataset",
									"type": "DatasetReference",
									"parameters": {
										"TableName": "_dependencies",
										"DbName": {
											"value": "@pipeline().parameters.DBName",
											"type": "Expression"
										},
										"DBServer": {
											"value": "@pipeline().parameters.DbServer",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "CopyMetadata",
				"description": "Recursive copy cdm.json files to metadata.parquet file",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"additionalColumns": [
							{
								"name": "FilePath",
								"value": "$$FILEPATH"
							},
							{
								"name": "Environment",
								"value": {
									"value": "@pipeline().parameters.Environment",
									"type": "Expression"
								}
							}
						],
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"wildcardFolderPath": {
								"value": "@{pipeline().parameters.Environment}/**/",
								"type": "Expression"
							},
							"wildcardFileName": "*.cdm.json",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings",
							"copyBehavior": "MergeFiles"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"path": "$['definitions']"
								},
								"sink": {
									"name": "definitions",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "$['FilePath']"
								},
								"sink": {
									"name": "FilePath",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "$['Environment']"
								},
								"sink": {
									"name": "Environment",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "$['entities']"
								},
								"sink": {
									"name": "entities",
									"type": "String"
								}
							},
							{
								"source": {
									"path": "$['definitions'][0]['entityName']"
								},
								"sink": {
									"name": "EntityName",
									"type": "String"
								}
							}
						],
						"collectionReference": "",
						"mapComplexValuesToString": true
					}
				},
				"inputs": [
					{
						"referenceName": "CDMUtil_CDM_File_Dataset",
						"type": "DatasetReference",
						"parameters": {
							"Container": {
								"value": "@pipeline().parameters.container",
								"type": "Expression"
							},
							"StorageAccount": {
								"value": "@pipeline().parameters.StorageAccount",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "CDMUtil_Metadata_File_Dataset",
						"type": "DatasetReference",
						"parameters": {
							"container": {
								"value": "@pipeline().parameters.container",
								"type": "Expression"
							},
							"folder": {
								"value": "@{pipeline().parameters.Environment}",
								"type": "Expression"
							},
							"StorageAccount": {
								"value": "@pipeline().parameters.StorageAccount",
								"type": "Expression"
							}
						}
					}
				]
			}
		],
		"parameters": {
			"StorageAccount": {
				"type": "string",
				"defaultValue": "https://techdeliverydatalake.dfs.core.windows.net/"
			},
			"container": {
				"type": "string",
				"defaultValue": "dynamics365-financeandoperations"
			},
			"Environment": {
				"type": "string",
				"defaultValue": "d365techdelivery-dev.sandbox.operations.dynamics.com"
			},
			"DDLType": {
				"type": "string",
				"defaultValue": "SynapseView"
			},
			"ParserVersion": {
				"type": "string",
				"defaultValue": "2.0"
			},
			"DbServer": {
				"type": "string",
				"defaultValue": "techdeliverydatalaketesting-ondemand.sql.azuresynapse.net"
			},
			"DbName": {
				"type": "string",
				"defaultValue": "fno"
			},
			"Schema": {
				"type": "string",
				"defaultValue": "dbo"
			},
			"ObjectTypes": {
				"type": "string",
				"defaultValue": "Tables,Entities,ChangeFeed"
			},
			"GetDependency": {
				"type": "bool",
				"defaultValue": false
			},
			"EntityListForDependency": {
				"type": "string",
				"defaultValue": "ReplacemeEntity1,Entity2"
			}
		},
		"folder": {
			"name": "CDMUtil"
		},
		"annotations": [],
		"lastPublishTime": "2022-12-12T15:52:28Z"
	}
}