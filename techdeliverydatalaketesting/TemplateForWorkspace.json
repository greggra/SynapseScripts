{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "techdeliverydatalaketesting"
		},
		"AXDBConnectionString_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AXDBConnectionString'"
		},
		"FnO_TechDeliverySynapse_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'FnO_TechDeliverySynapse'"
		},
		"PipelineTarget_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'PipelineTarget'"
		},
		"SourceDataLake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'SourceDataLake'"
		},
		"Source_DataLake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Source_DataLake'"
		},
		"SynapseDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SynapseDB'"
		},
		"SynapseSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SynapseSource'"
		},
		"TargetSQLDB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'TargetSQLDB'"
		},
		"Target_Database_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Target_Database'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().DbServer};Initial Catalog=@{linkedService().DbName}"
		},
		"d365techdelivery_CustTable_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'd365techdelivery_CustTable'"
		},
		"techdeliverydatalaketesting-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'techdeliverydatalaketesting-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:techdeliverydatalaketesting.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"SourceDataLake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://techdeliverydatalake.dfs.core.windows.net/"
		},
		"Source_DataLake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().StorageAccount}"
		},
		"d365techdelivery_CustTable_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://d365techdelivery-dev.sandbox.operations.dynamics.com/data"
		},
		"d365techdelivery_CustTable_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "greggra@stoneridgesoftware.com"
		},
		"techdeliverydatalaketesting-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://techdeliverydatalake.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/FullExport_SQL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetMetadata').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "CopyFullDataSQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "TABLE_NAME",
											"value": "item().TABLE_NAME"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select @{item().COLUMN_NAME} from @{pipeline().parameters.TABLE_SCHEMA}.@{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "DROP TABLE IF EXISTS @{pipeline().parameters.TABLE_SCHEMA}.@{item().TABLE_NAME}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Source_SQL_Query",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Dest_SQL_Table",
											"type": "DatasetReference",
											"parameters": {
												"Schema": {
													"value": "@pipeline().parameters.TABLE_SCHEMA",
													"type": "Expression"
												},
												"Table": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "PostCopyScript",
									"description": "Create Primary Index\nUpdate marker table",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "CopyFullDataSQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "PipelineTarget",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "IF OBJECT_ID('dbo.SynapseToSQLTables', 'U') IS NULL\nCREATE TABLE [dbo].[SynapseToSQLTables](\n\t[TableName] [varchar](100) NOT NULL,\n\t[CDCTableName] [varchar](100) NULL,\n\t[ColumnNames] [varchar](8000) NULL,\n\t[Status] [int] NULL,\n\t[CreatedDateTime] [datetime] NULL,\n\t[ModifiedDateTime] [datetime] NULL,\n\t[LastProcessedFile] [varchar](200) NULL,\n CONSTRAINT [PK_TABLENAME] PRIMARY KEY CLUSTERED \n(\n\t[TableName] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY];\n\nDeclare @TableName varchar(100)= '@{pipeline().parameters.TABLE_SCHEMA}.@{item().TABLE_NAME}';\nDeclare @CDCTableName varchar(100)= '@{pipeline().parameters.TABLE_SCHEMA}._cdc_@{item().TABLE_NAME}';\nDeclare @ColumnNames varchar(8000) = '@{item().COLUMN_NAME}';\n\nIF EXISTS (SELECT 1 FROM dbo.SynapseToSQLTables where TableName = @TableName)\n\tBEGIN\n\t\tupdate dbo.SynapseToSQLTables set ColumnNames = @ColumnNames, Status= 0 , LastProcessedFile = '' , CreatedDateTime = getdate(), ModifiedDateTime = GETDATE()\n\t\twhere TableName = @TableName\n\tEND \nELSE \n\tBEGIN\n\t\tInsert into dbo.SynapseToSQLTables (TableName, CDCTableName,  LastProcessedFile, ColumnNames, [Status], CreatedDateTime, ModifiedDateTime)\n\t\tvalues (@TableName, @CDCTableName, '', @ColumnNames, 0,   getdate(), getdate() )\n\tEND\n\nDeclare @SQLNull nvarchar(300)=  FORMATMESSAGE('ALTER TABLE  %s ALTER COLUMN  RECID BIGINT NOT NULL;', '@{pipeline().parameters.TABLE_SCHEMA}.@{item().TABLE_NAME}');\n\nEXECUTE  sp_executesql  @SQLNull;\n\nDeclare @SQLIdx nvarchar(300)=  FORMATMESSAGE('ALTER TABLE %s  ADD CONSTRAINT PK_%s_RECID PRIMARY KEY CLUSTERED (RECID);', '@{pipeline().parameters.TABLE_SCHEMA}.@{item().TABLE_NAME}', '@{item().TABLE_NAME}' );\n\nEXECUTE  sp_executesql  @SQLIdx;\n\nupdate SynapseToSQLTables set Status = 1, LastProcessedFile = ''\nwhere TableName = @TableName",
													"type": "Expression"
												}
											}
										],
										"logSettings": {
											"logDestination": "ActivityOutput"
										}
									}
								}
							]
						}
					},
					{
						"name": "GetMetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT  TABLE_NAME\n       ,STUFF((SELECT ', ' + CAST(COLUMN_NAME AS VARCHAR(100)) [text()]\n         FROM INFORMATION_SCHEMA.COLUMNS \n         WHERE TABLE_NAME = t.TABLE_NAME and TABLE_SCHEMA = t.TABLE_SCHEMA\n\t\t and COLUMN_NAME not in ('$FileName','_SysRowId', 'LSN', 'LastProcessedChange_DateTime', 'DataLakeModified_DateTime')\n\t\t order by Ordinal_position Asc\n         FOR XML PATH(''), TYPE)\n        .value('.','NVARCHAR(MAX)'),1,2,' ') COLUMN_NAME\nFROM INFORMATION_SCHEMA.COLUMNS t\nWHERE TABLE_NAME in ('@{replace(replace(pipeline().parameters.TABLE_NAMES,' ', ''), ',', ''',''')}')\nand  TABLE_SCHEMA = '@{pipeline().parameters.TABLE_SCHEMA}'\nGROUP BY TABLE_NAME, TABLE_SCHEMA",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Source_SQL_Query",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TABLE_NAMES": {
						"type": "string",
						"defaultValue": "CustGroup,SalesLine"
					},
					"TABLE_SCHEMA": {
						"type": "string",
						"defaultValue": "DBO"
					}
				},
				"folder": {
					"name": "DataLakeToSQL"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-08T09:23:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Source_SQL_Query')]",
				"[concat(variables('workspaceId'), '/datasets/Dest_SQL_Table')]",
				"[concat(variables('workspaceId'), '/linkedServices/PipelineTarget')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IncrementalExport_SQL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "GetLastChangedFeedFiles",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SynapseSource",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "declare @Table_Name varchar(200) = '@{pipeline().parameters.TABLE_NAME}';\ndeclare @edsname varchar(200) = (select top 1 name from sys.external_data_sources\nwhere location like '%dfs.core.windows.net/dynamics365-financeandoperations%');\n\nDeclare @SQLQuery nvarchar(4000) = 'SELECT\n    r.filepath(1) AS [TABLE_NAME]\n\t,max(r.filepath(2)) AS [LAST_UPDATED_CDC_FILE]\nFROM OPENROWSET(\n    BULK ''ChangeFeed/*/*.csv'',\n        DATA_SOURCE = ''' + @edsname+''',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\n        FIRSTROW = 1) \n\t\tWith(FirstColum nvarchar(100))\n\t\tas r\nWHERE (r.filepath(1) = '''+ @Table_Name +''' OR ''' + @Table_Name+ ''' = '''')\nGROUP BY\n    r.filepath(1)';\n\nEXECUTE  sp_executesql  @SQLQuery;",
										"type": "Expression"
									}
								}
							],
							"logSettings": {
								"logDestination": "ActivityOutput"
							}
						}
					},
					{
						"name": "Filter_ChangedTables",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "GetLastChangedFeedFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "PipelineTarget",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "declare @LastChangedFiles nvarchar(max) = '@{activity('GetLastChangedFeedFiles').output.resultSets[0].rows}';\ndeclare @publishedTables varchar(max) = replace(@LastChangedFiles, '\\', '')\n\n\nSELECT A.TableName as [TABLE_NAME]\n      ,A.CDCTableName as [CDC_TABLE_NAME]\n      ,A.ColumnNames as [COLUMN_NAMES]\n      ,A.LastProcessedFile as [LAST_PROCESSED_FILE_NAME]\n      ,B.LAST_UPDATED_CDC_FILE as [LAST_UPDATED_CDC_FILE]\n  FROM [dbo].[SynapseToSQLTables] A\n  join \n  (\n\tSELECT * \n\tFROM OPENJSON(@publishedTables, '$')\n\tWITH  (\n\t\t\tTABLE_NAME     varchar(200)             '$.TABLE_NAME',\n\t\t\tLAST_UPDATED_CDC_FILE   varchar(100) '$.LAST_UPDATED_CDC_FILE'\n\t\t )\n  ) as B on Substring(A.TABLENAME, charindex('.', A.TABLENAME)+1, len(A.TABLENAME))  = B.TABLE_NAME\nWHERE STATUS = 1\nand B.LAST_UPDATED_CDC_FILE > A.LastProcessedFile\n\n",
										"type": "Expression"
									}
								}
							],
							"logSettings": {
								"logDestination": "ActivityOutput"
							}
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter_ChangedTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@if(greater(activity('Filter_ChangedTables').output.resultSetCount,0) , activity('Filter_ChangedTables').output.resultSets[0].rows, variables('Empty'))",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "CDCCopy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "TABLE_NAME",
											"value": "item().TABLE_NAME"
										}
									],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "Select DML_Action, @{item().COLUMN_NAMES}\n\t\tFROM \n\t\t(\n\t\t\tSELECT *, ROW_NUMBER() OVER (PARTITION BY RECID ORDER BY Start_LSN DESC, Seq_Val DESC, DataLakeModified_DateTime DESC) AS ROWNO FROM @{item().CDC_TABLE_NAME}\nWHERE [$FileName] > '@{item().LAST_PROCESSED_FILE_NAME}'  OR\n[$FileName] = '@{item().LAST_UPDATED_CDC_FILE}' \n\t\t) AS X\n\t\tWHERE X.ROWNO = 1",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "DROP TABLE IF EXISTS @{item().CDC_TABLE_NAME}",
												"type": "Expression"
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Source_SQL_Query1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Dest_SQL_Table1",
											"type": "DatasetReference",
											"parameters": {
												"Schema": {
													"value": "@{first(split(item().CDC_TABLE_NAME,'.'))}",
													"type": "Expression"
												},
												"Table": {
													"value": "@{last(split(item().CDC_TABLE_NAME,'.'))}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "MergeData",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "CDCCopy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "PipelineTarget",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "Declare @TargetTable nvarchar(200) = '@{item().TABLE_NAME}';\nDeclare @CDCTable nvarchar(200) ='@{item().CDC_TABLE_NAME}'\n\ndeclare @UpdateColumns nvarchar(max);\ndeclare @Columns nvarchar(max);\nSelect @UpdateColumns = COALESCE(@UpdateColumns + ', ', '') + 'T.' + x.COLUMN_NAME + ' = S.'  + x.COLUMN_NAME,\n  @Columns = COALESCE(@Columns + ', ', '')  + x.COLUMN_NAME \n from INFORMATION_SCHEMA.COLUMNS x \nWHERE TABLE_NAME =  replace(@TargetTable,'dbo.','')\nand  TABLE_SCHEMA = 'dbo'\n\nselect @UpdateColumns, @Columns\n\nDeclare @MergeStatement nvarchar(max);\n\nset @MergeStatement \n=  ' MERGE ' + @TargetTable + ' T USING '+ @CDCTable + ' S' + \n' ON T.RECID = S.RECID' +\n' WHEN MATCHED and S.DML_Action = ''AFTER_UPDATE''' +\n'    THEN UPDATE SET ' +\n @UpdateColumns +\n' WHEN NOT MATCHED BY TARGET and S.DML_Action <> ''DELETE'' THEN INSERT (' + \n@Columns +\n')\tValues (' +\n@Columns + \n')' +\n' WHEN MATCHED and S.DML_Action = ''DELETE''' +\n' THEN DELETE;'; \n\nExecute sp_executesql  @MergeStatement;\n\n\nupdate SynapseToSQLTables set Status = 1, LastProcessedFile = '@{item().LAST_UPDATED_CDC_FILE}'\nwhere TableName = @TargetTable;\n\n-- drop table at the end \ndrop table @{item().CDC_TABLE_NAME}",
													"type": "Expression"
												}
											}
										],
										"logSettings": {
											"logDestination": "ActivityOutput"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TABLE_NAME": {
						"type": "string",
						"defaultValue": "CustTable"
					}
				},
				"variables": {
					"Empty": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "DataLakeToSQL"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-08T09:27:55Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SynapseSource')]",
				"[concat(variables('workspaceId'), '/linkedServices/PipelineTarget')]",
				"[concat(variables('workspaceId'), '/datasets/Source_SQL_Query1')]",
				"[concat(variables('workspaceId'), '/datasets/Dest_SQL_Table1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlQuery')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Target_Database",
					"type": "LinkedServiceReference",
					"parameters": {
						"DbName": {
							"value": "@dataset().DbName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DbName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Target_Database')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CDMUtil_AXDB_Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AXDBConnectionString",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AXDBConnectionString')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CDMUtil_CDM_File_Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Source cdm.json files",
				"linkedServiceName": {
					"referenceName": "Source_DataLake",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageAccount": "https://techdeliverydatalake.dfs.core.windows.net/"
					}
				},
				"parameters": {
					"Container": {
						"type": "string",
						"defaultValue": "dynamics365-financeandoperations"
					},
					"StorageAccount": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"jsonSchemaSemanticVersion": {
							"type": "string"
						},
						"imports": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"corpusPath": {
										"type": "string"
									},
									"moniker": {
										"type": "string"
									}
								}
							}
						},
						"definitions": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"entityName": {
										"type": "string"
									},
									"exhibitsTraits": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"traitReference": {
													"type": "string"
												},
												"arguments": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"name": {
																"type": "string"
															},
															"value": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									},
									"attributeContext": {
										"type": "object",
										"properties": {
											"type": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"definition": {
												"type": "string"
											},
											"contents": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"type": {
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"parent": {
															"type": "string"
														},
														"definition": {
															"type": "string"
														},
														"contents": {
															"type": "array",
															"items": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									},
									"hasAttributes": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												},
												"appliedTraits": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"attributeContext": {
													"type": "string"
												},
												"dataFormat": {
													"type": "string"
												},
												"description": {
													"type": "string"
												}
											}
										}
									},
									"displayName": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"version": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Source_DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CDMUtil_DependencyFile_Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techdeliverydatalaketesting-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dependencies.parquet",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/techdeliverydatalaketesting-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CDMUtil_Metadata_File_Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Source_DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "metadata.parquet",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Source_DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CDMUtil_SQLTable_Dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Target_Database",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DBServer": {
						"type": "string"
					},
					"DbName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Target_Database')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSVDataFiles')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Source_DataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Source_DataLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSVInputFile')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techdeliverydatalaketesting-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS/DataFlow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/techdeliverydatalaketesting-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSVInputFile1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techdeliverydatalaketesting-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS/DataFlow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/techdeliverydatalaketesting-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSVOutputFile')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techdeliverydatalaketesting-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS/DataFlow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/techdeliverydatalaketesting-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CSVOutputFile1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techdeliverydatalaketesting-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS/DataFlow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\"",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/techdeliverydatalaketesting-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeToSQL_CSV_File_Dataset1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SourceDataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SourceDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeToSQL_CSV_File_Dataset11')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SourceDataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"StorageAccount": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SourceDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeToSQL_TargetDB_SQLQuery_Dataset1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TargetSQLDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DbServer": {
						"type": "string"
					},
					"DbName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TargetSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dest_SQL_Table')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PipelineTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dest_SQL_AzureSQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/PipelineTarget')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dest_SQL_Table1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PipelineTarget",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"Table": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Dest_SQL_AzureSQL"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/PipelineTarget')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationSQLTable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TargetSQLDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DbServer": {
						"type": "string"
					},
					"DbName": {
						"type": "string"
					},
					"Schema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TargetSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationSQLTable1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TargetSQLDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DbServer": {
						"type": "string"
					},
					"DbName": {
						"type": "string"
					},
					"Schema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/TargetSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetInputFile')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techdeliverydatalaketesting-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS/DataFlow"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/techdeliverydatalaketesting-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetInputFile1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techdeliverydatalaketesting-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS/DataFlow"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/techdeliverydatalaketesting-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetOutputFile')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techdeliverydatalaketesting-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS/DataFlow"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/techdeliverydatalaketesting-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetOutputFile1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "techdeliverydatalaketesting-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADLS/DataFlow"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/techdeliverydatalaketesting-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Source_SQL_Query')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SynapseSource",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source_SQL_Serverless"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": ""
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SynapseSource')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Source_SQL_Query1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SynapseSource",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Source_SQL_Serverless"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": ""
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SynapseSource')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Source_Synapse_Table')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SynapseDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DbServer": {
						"type": "string"
					},
					"DbName": {
						"type": "string"
					},
					"Schema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SynapseDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Source_Synapse_Table1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SynapseDB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DbServer": {
						"type": "string"
					},
					"DbName": {
						"type": "string"
					},
					"Schema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SynapseDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AXDBConnectionString')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AXDBConnectionString_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FnO_TechDeliverySynapse')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('FnO_TechDeliverySynapse_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PipelineTarget')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Linked Service for SQL endpoint",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('PipelineTarget_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataLake')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "The data lake ADLG2 storage account where F&O exports data (CSV files)",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('SourceDataLake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('SourceDataLake_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Source_DataLake')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"StorageAccount": {
						"type": "String",
						"defaultValue": "https://techdeliverydatalake.dfs.core.windows.net/"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Source_DataLake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Source_DataLake_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SynapseDB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SynapseDB_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SynapseSource')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SynapseSource_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TargetSQLDB')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "A real SQLServer database",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('TargetSQLDB_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Target_Database')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DbServer": {
						"type": "string"
					},
					"DbName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Target_Database_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Ziegler')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Demo for creating DataFlows in Synapse Studio",
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "a0f22374-15dc-4c7d-8d98-e1e13691873a",
					"tenantID": "2e14a5b1-fbf8-415b-bc7d-93e20829e510"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/d365techdelivery_CustTable')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "OData",
				"typeProperties": {
					"url": "[parameters('d365techdelivery_CustTable_properties_typeProperties_url')]",
					"authenticationType": "Windows",
					"userName": "[parameters('d365techdelivery_CustTable_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('d365techdelivery_CustTable_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/techdeliverydatalaketesting-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('techdeliverydatalaketesting-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/techdeliverydatalaketesting-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('techdeliverydatalaketesting-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CDMToSQL')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "CDMToSQL"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Source_DataLake",
								"type": "LinkedServiceReference"
							},
							"name": "SourceCDMTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "Target_Database",
								"type": "LinkedServiceReference"
							},
							"name": "SQLSink"
						},
						{
							"linkedService": {
								"referenceName": "Target_Database",
								"type": "LinkedServiceReference"
							},
							"name": "FullExportSQL"
						}
					],
					"transformations": [
						{
							"name": "RemoveColumns"
						},
						{
							"name": "alterRow"
						},
						{
							"name": "IdentifyColumns"
						},
						{
							"name": "RankRowVersion"
						},
						{
							"name": "Deduplicate"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SourceContainer as string ('dynamics365-financeandoperations'),",
						"     ManifestPath as string ('Tables/Finance/AccountsReceivable/Group'),",
						"     ManifefastName as string ('Group'),",
						"     TableName as string ('CustGroup'),",
						"     FromDateTime as timestamp (currentTimestamp()-days(365)),",
						"     ToDateTime as timestamp (currentTimestamp()),",
						"     Schema as string ('dbo'),",
						"     DataFiles as string,",
						"     Environment as string ('test')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     modifiedAfter: ($FromDateTime),",
						"     modifiedBefore: ($ToDateTime),",
						"     entity: ($TableName),",
						"     format: 'cdm',",
						"     manifestType: 'manifest',",
						"     manifestName: ($ManifefastName),",
						"     entityPath: ($ManifestPath),",
						"     local: true,",
						"     folderPath: ($Environment),",
						"     fileSystem: ($SourceContainer),",
						"     dateFormats: ['yyyy-MM-dd'],",
						"     timestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss'],",
						"     preferredFractionalType: 'float') ~> SourceCDMTable",
						"Deduplicate select(mapColumn(",
						"          each(match(name!='_SysRowId'&&name!='LSN'&&name!='Update_Mask'&&name!='Start_LSN'&&name!='End_LSN'&&name!='Seq_Val'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns",
						"RemoveColumns alterRow(upsertIf(isNull(DML_Action)||DML_Action==\"INSERT\"||DML_Action==\"AFTER_UPDATE\"),",
						"     deleteIf(DML_Action==\"DELETE\")) ~> alterRow",
						"SourceCDMTable derive(Start_LSN = toString(byName(\"Start_LSN\")),",
						"          Seq_Val = toString(byName(\"Seq_Val\")),",
						"          DataLakeModified_DateTime = toTimestamp(byName(\"DataLakeModified_DateTime\")),",
						"          RECID = toLong(byName(\"RECID\")),",
						"          DML_Action = toString(byName(\"DML_Action\")),",
						"          {_RowVersion} = 0) ~> IdentifyColumns",
						"split1@IncrementalExport window(over(RECID),",
						"     desc(Start_LSN, true),",
						"     desc(Seq_Val, true),",
						"     desc(DataLakeModified_DateTime, true),",
						"     desc(DML_Action, true),",
						"     {_RowVersion} = denseRank()) ~> RankRowVersion",
						"RankRowVersion filter(toLong(byName(\"_RowVersion\"))==1) ~> Deduplicate",
						"IdentifyColumns split($ManifefastName == \"ChangeFeed\",",
						"     disjoint: false) ~> split1@(IncrementalExport, FullExport)",
						"alterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: ($Schema),",
						"     tableName: ($TableName),",
						"     preSQLs:[(concat(\"begin tran; update  [dbo].[_ControlTableForCopy] set LastCopyStatus = 1 where TableSchema = '\",$Schema , \"' and TableName = '\" , $TableName ,\"' commit tran;\"))],",
						"     insertable: true,",
						"     updateable: true,",
						"     deletable: true,",
						"     upsertable: true,",
						"     keys:['RECID'],",
						"     postSQLs:[(concat(\"begin tran; declare @ChildItems nvarchar(max)='\", $DataFiles,\"'; declare @ToDateTime DateTime='\", toString($ToDateTime),\"'; declare @LastFileName nvarchar(200) = (select max(name) from Openjson(@ChildItems) with (name nvarchar(100) '$.name') where name != 'index.json');  update  [dbo].[_ControlTableForCopy] set LastCopyDateTime =@ToDateTime, LastCopyMarker = @LastFileName, LastCopyStatus = 0 where TableSchema = '\",$Schema , \"' and TableName = '\" , $TableName ,\"' commit tran;\"))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     preCommands: [],",
						"     postCommands: []) ~> SQLSink",
						"split1@FullExport sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: ($Schema),",
						"     tableName: ($TableName),",
						"     preSQLs:[(concat(\"begin tran; update  [dbo].[_ControlTableForCopy] set LastCopyStatus = 1 where TableSchema = '\",$Schema , \"' and TableName = '\" , $TableName ,\"' commit tran;\"))],",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     truncate: true,",
						"     postSQLs:[(concat(\"begin tran; declare @ChildItems nvarchar(max)='\", $DataFiles,\"'; declare @ToDateTime DateTime='\", toString($ToDateTime),\"'; declare @LastFileName nvarchar(200) = (select max(name) from Openjson(@ChildItems) with (name nvarchar(100) '$.name') where name != 'index.json');  update  [dbo].[_ControlTableForCopy] set LastCopyDateTime =@ToDateTime, LastCopyMarker = @LastFileName, LastCopyStatus = 0 where TableSchema = '\",$Schema , \"' and TableName = '\" , $TableName ,\"' commit tran;\"))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FullExportSQL"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Source_DataLake')]",
				"[concat(variables('workspaceId'), '/linkedServices/Target_Database')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLakeToSQL_CDMToSQL_Dataflows1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "DataLakeToSQL_CDMToSQL_Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "SourceDataLake",
								"type": "LinkedServiceReference"
							},
							"name": "SourceCDMTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "TargetSQLDB",
								"type": "LinkedServiceReference"
							},
							"name": "SQLSink"
						}
					],
					"transformations": [
						{
							"name": "RemoveColumns"
						},
						{
							"name": "alterRow"
						},
						{
							"name": "IdentifyColumns"
						},
						{
							"name": "RankRowVersion"
						},
						{
							"name": "Deduplicate"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SourceContainer as string ('dynamics365-financeandoperations'),",
						"     ManifefastName as string,",
						"     TableName as string,",
						"     FromDateTime as timestamp (currentTimestamp()-days(365)),",
						"     ToDateTime as timestamp (currentTimestamp()),",
						"     Schema as string ('dbo'),",
						"     DataFiles as string,",
						"     Environment as string ('test'),",
						"     ManifestPath as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     modifiedAfter: ($FromDateTime),",
						"     modifiedBefore: ($ToDateTime),",
						"     entity: ($TableName),",
						"     format: 'cdm',",
						"     manifestType: 'manifest',",
						"     manifestName: ($ManifefastName),",
						"     entityPath: ($ManifestPath),",
						"     local: true,",
						"     folderPath: ($Environment),",
						"     fileSystem: ($SourceContainer),",
						"     dateFormats: ['yyyy-MM-dd'],",
						"     timestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss'],",
						"     preferredFractionalType: 'float') ~> SourceCDMTable",
						"Deduplicate select(mapColumn(",
						"          each(match(name!='_SysRowId'&&name!='LSN'&&name!='Update_Mask'&&name!='Start_LSN'&&name!='End_LSN'&&name!='Seq_Val'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns",
						"RemoveColumns alterRow(upsertIf(isNull(DML_Action)||DML_Action==\"INSERT\"||DML_Action==\"AFTER_UPDATE\"),",
						"     deleteIf(DML_Action==\"DELETE\")) ~> alterRow",
						"SourceCDMTable derive(Start_LSN = toString(byName(\"Start_LSN\")),",
						"          Seq_Val = toString(byName(\"Seq_Val\")),",
						"          DataLakeModified_DateTime = toTimestamp(byName(\"DataLakeModified_DateTime\")),",
						"          RECID = toLong(byName(\"RECID\")),",
						"          DML_Action = toString(byName(\"DML_Action\")),",
						"          {_RowVersion} = 0) ~> IdentifyColumns",
						"IdentifyColumns window(over(RECID),",
						"     desc(Start_LSN, true),",
						"     desc(Seq_Val, true),",
						"     desc(DataLakeModified_DateTime, true),",
						"     desc(DML_Action, true),",
						"     {_RowVersion} = denseRank()) ~> RankRowVersion",
						"RankRowVersion filter(toLong(byName(\"_RowVersion\"))==1) ~> Deduplicate",
						"alterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: ($Schema),",
						"     tableName: ($TableName),",
						"     preSQLs:[(\"begin tran; update  [dbo].[_ControlTableForCopy] set LastCopyStatus = 1 where TableSchema = '{$Schema}' and TableName = '{$TableName}'; if ('{$ManifefastName}' != 'ChangeFeed') truncate table {$Schema}.{$TableName}; commit tran;\")],",
						"     insertable: true,",
						"     updateable: true,",
						"     deletable: true,",
						"     upsertable: true,",
						"     keys:['RECID'],",
						"     postSQLs:[(\"begin tran; declare @ChildItems nvarchar(max)= '{$DataFiles}'; declare @ToDateTime DateTime= '{toString($ToDateTime)}'; declare @LastFileName nvarchar(200) = (select max(name) from Openjson(@ChildItems) with (name nvarchar(100) '$.name') where name != 'index.json');  update  [dbo].[_ControlTableForCopy] set LastCopyDateTime =@ToDateTime, LastCopyDuration= DATEDIFF(MINUTE, @ToDateTime, GETUTCDATE()), LastCopyMarker = @LastFileName, LastCopyStatus = 0 where TableSchema = '{$Schema}' and TableName = '{$TableName}'  commit tran;\")],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     preCommands: [],",
						"     postCommands: []) ~> SQLSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SourceDataLake')]",
				"[concat(variables('workspaceId'), '/linkedServices/TargetSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PartitionBySize_csv')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Partition"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CSVInputFile1",
								"type": "DatasetReference"
							},
							"name": "InputFile",
							"description": "Load Input file"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CSVOutputFile1",
								"type": "DatasetReference"
							},
							"name": "PartitionFile",
							"description": "Export data to output file"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tFileName as string,\n\tPartition as integer\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> InputFile\nInputFile sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tfilePattern:(replace($FileName, '.', '[n].')),\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('roundRobin', ($Partition))) ~> PartitionFile"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CSVInputFile1')]",
				"[concat(variables('workspaceId'), '/datasets/CSVOutputFile1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PartitionBySize_parquet')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Partition"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetInputFile1",
								"type": "DatasetReference"
							},
							"name": "InputFile",
							"description": "Load Input file"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetOutputFile1",
								"type": "DatasetReference"
							},
							"name": "PartitionFile",
							"description": "Export data to output file"
						}
					],
					"transformations": [],
					"script": "parameters{\n\tFileName as string,\n\tPartition as integer\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet') ~> InputFile\nInputFile sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfilePattern:(replace($FileName, '.', '[n].')),\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('roundRobin', ($Partition))) ~> PartitionFile"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ParquetInputFile1')]",
				"[concat(variables('workspaceId'), '/datasets/ParquetOutputFile1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Adhoc')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "use FnO\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CopySynapseTableToOnPrem')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SynapseAdmin"
				},
				"content": {
					"query": "-- Copy data from Syanapse to OnPrem\n-- using a linked server\nCREATE DATABASE FnO_RawOnPrem\nGO\n\nEXEC master.dbo.sp_addlinkedserver\n                        @server = N'SynapseSQL',@srvproduct=N'', @provider=N'MSOLEDBSQL',\n                        @datasrc=N'techdeliverydatalaketesting-ondemand.sql.azuresynapse.net', \n                        @catalog=N'master';\n\nEXEC master.dbo.sp_addlinkedsrvlogin @rmtsrvname=N'SynapseSQL', @useself=N'False',\n                       @locallogin=NULL,\n                       @rmtuser=N'sqladminuser',@rmtpassword='G2qCNH41X4c0oL19O#iB'\nGO\n\nEXEC master.dbo.sp_serveroption @server=N'SynapseSQL', \n                       @optname=N'remote proc transaction promotion', @optvalue=N'false'\nGO\nEXEC master.dbo.sp_serveroption @server=N'SynapseSQL', \n                       @optname=N'rpc', @optvalue=N'true'\nGO\nEXEC master.dbo.sp_serveroption @server=N'SynapseSQL',\n                       @optname=N'rpc out', @optvalue=N'true'\nGO\n\n\nIF  EXISTS (SELECT * FROM FnO_RawOnPrem.sys.objects WHERE object_id = OBJECT_ID(N'CustTable') AND type in (N'U'))\nDROP TABLE CustTable\nGO\n\nselect * into FnO_RawOnPrem.dbo.CustTable from SynapseSQL.FnO.raw.CustTable\nGO\n\nIF  EXISTS (SELECT * FROM FnO_RawOnPrem.sys.objects WHERE object_id = OBJECT_ID(N'CustInvoiceTrans') AND type in (N'U'))\nDROP TABLE FnO_RawOnPrem.dbo.CustInvoiceTrans\nGO\n\nselect SalesId, DefaultDimension, DlvDate, InventQty, InvoiceId \n  into FnO_RawOnPrem.dbo.CustInvoiceTrans \n  from SynapseSQL.FnO.raw.CustInvoiceTrans\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "FnO",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/KillAll')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SynapseAdmin"
				},
				"content": {
					"query": "USE [master] \nGO \n\nSELECT 'KILL ' + CAST(session_id AS VARCHAR(10)) AS 'SQL Command'\nFROM sys.dm_exec_sessions\nWHERE is_user_process = 1\nAND database_id = DB_ID('FnO'); --specify database name\n\ndrop database fno",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/_dwPrep')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "use fno\ngo\n\ncreate schema dw\ngo\n\ncreate external file format ParquetFileFormat with\n  ( format_type = PARQUET,\n    data_compression = 'org.apache.hadoop.io.compress.SnappyCodec' )\ngo\n\ncreate external data source ParquetDataSource\n  with (location = N'https://techdeliverydatalake.dfs.core.windows.net/parquet/'\n       ,credential = [dynamics365_financeandoperations_d365techdelivery_dev_sandbox])\ngo\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/_getTablesMetaData')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SynapseAdmin"
				},
				"content": {
					"query": "declare @tableNames varchar(max) = 'GeneralJournalEntry,GeneralJournalAccountEntry,Ledger,DimensionFinancialTag,DimensionAttributeValueCombination,DirPartyTable,OMOperatingUnit,MainAccount,DimensionAttribute,DimensionAttributeDirCategory';\n\nSelect \nX.Table_Name,\nX.Data_Path,\nX.Manifest_Path,\nX.Manifest_Name,\n'NO_PARTITION' as Partition_Strategy,\n'CREATEDDATETIME' as Partition_DateColumn\nfrom (\nSELECT \n'Tables/' + r.filepath(1) + '/'+ r.filepath(2) + '/' + r.filepath(3) + '/'+ r.filepath(4) + '/' + r.filepath(5)  as [Data_Path],\n'Tables/' + r.filepath(1) + '/'+ r.filepath(2) + '/' + r.filepath(3) + '/'+ r.filepath(4)    as [Manifest_Path],\nr.filepath(4)    as [Manifest_Name],\nr.filepath(5) as [Table_Name]\nFROM OPENROWSET(BULK 'Tables/*/*/*/*/*/index.json', FORMAT = 'CSV', fieldterminator ='0x0b',fieldquote = '0x0b'\n, DATA_SOURCE ='dynamics365_financeandoperations_d365techdelivery_dev_sandbox_EDS') \nwith (firstCol nvarchar(1000)) as r group by r.filepath(1) , r.filepath(2), r.filepath(3) , r.filepath(4), r.filepath(5)\nunion \nSELECT \n'Tables/' + r.filepath(1) + '/'+ r.filepath(2) + '/' + r.filepath(3) + '/'+ r.filepath(4)  as [Data_Path],\n'Tables/' + r.filepath(1) + '/'+ r.filepath(2) + '/' + r.filepath(3)     as [Manifest_Path],\nr.filepath(3)    as [Manifest_Name],\nr.filepath(4) as [Table_Name]\nFROM OPENROWSET(BULK 'Tables/*/*/*/*/index.json', FORMAT = 'CSV', fieldterminator ='0x0b',fieldquote = '0x0b'\n, DATA_SOURCE ='dynamics365_financeandoperations_d365techdelivery_dev_sandbox_EDS') \nwith (firstCol nvarchar(1000)) as r group by r.filepath(1) , r.filepath(2), r.filepath(3) , r.filepath(4)\nunion \nSELECT \n'Tables/' + r.filepath(1) + '/'+ r.filepath(2) + '/' + r.filepath(3)   as [Data_Path],\n r.filepath(3) as [Table_Name],\n'Tables/' + r.filepath(1) + '/'+ r.filepath(2)      as [Manifest_Path],\nr.filepath(2)    as [Manifest_Name]\nFROM OPENROWSET(BULK 'Tables/*/*/*/index.json', FORMAT = 'CSV', fieldterminator ='0x0b',fieldquote = '0x0b'\n, DATA_SOURCE ='dynamics365_financeandoperations_d365techdelivery_dev_sandbox_EDS') \nwith (firstCol nvarchar(1000)) as r group by r.filepath(1) , r.filepath(2), r.filepath(3) \n) X \nwhere X.[Table_Name] not in  (select value from string_split(@tableNames, ',') )\nfor  JSON  PATH",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dBusinessUnit')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "use FnO\ngo\n\ncreate or alter view raw.vw_dBusinessUnit as \n  select t1.RecId as [Key]\n        ,t1.OMOperatingUnitNumber as BU\n        ,t1.Name as BusinessUnit \n    from raw.DirPartyTable t1 \n   where t1.OMOperatingUnitType = 4 \n     and t1.InstanceRelationType = 8363\ngo\n\n/*\n-- Need to delete the storage in data lake\ndrop external table dw.dBusinessUnit\ngo\n*/\n\ncreate external table dw.dBusinessUnit with (\n    location = 'DataWarehouse/dBusinessUnit'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select * from raw.vw_dBusinessUnit\ngo\n\n-- select * from raw.vw_dBusinessUnit\n-- select * from dw.dBusinessUnit",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dCompany')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW/InProgress"
				},
				"content": {
					"query": "use FnO\ngo\n\ncreate or alter view raw.vw_dCompany as \nwith distinctCompanies as (\n  select distinct \n         upper(DataArea) as DataAreaId\n        ,case when DataArea = 'DAT' then 'Do Not Use' else Name end as Name\n    from raw.CompanyInfo\n)\nselect cast(row_number() over(order by DataAreaId) as int) AS [Key]\n      ,DataAreaId\n      ,Name\n  from distinctCompanies\ngo\n\n/*\n-- Need to delete the storage in data lake\ndrop external table dw.dCompany\ngo\n*/\n\ncreate external table dw.dCompany with (\n    location = 'DataWarehouse/dCompany'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select * from raw.vw_dCompany\n     order by DataAreaId\ngo\n\n\n-- select * from raw.vw_dCompany\n-- select * from dw.dCompany",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dCostCenter')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "use FnO\ngo\n\ncreate or alter view raw.vw_dCostCenter as \n  select t1.RecId as [Key]\n        ,t1.OMOperatingUnitNumber as CC\n        ,t1.Name as CostCenter \n    from raw.DirPartyTable t1 \n   where t1.OMOperatingUnitType = 2 \n     and t1.InstanceRelationType = 8363\ngo\n\n/*\n-- Need to also delete the storage in data lake\ndrop external table dw.dCostCenter\ngo\n*/\n\ncreate external table dw.dCostCenter with (\n    location = 'DataWarehouse/dCostCenter'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select * from raw.vw_dCostCenter\ngo\n\n-- select * from raw.vw_dCostCenter\n-- select * from dw.dCostCenter",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dCustomer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW/InProgress"
				},
				"content": {
					"query": "use FnO\ngo\n\ncreate view raw.vw_dCustomer as \n  select ct.RecId as [Key]\n        ,ct.AccountNum as [Account Number]\n        ,dpt.Name as [Customer]\n        -- [Address]\n        ,ct.InvoiceAccount as [Account Number (Invoice)]\n        -- [Invoice Name]\n        -- [Invoice Address]\n        ,ct.PaymTermId as [Payment Terms (Default)]\n        ,ct.CashDisc as [Cash Discount (Default)]\n        ,ct.MaxCredit as [Maximum Credit Limit]\n        ,ct.CreditRating as [Credit Rating]\n        ,ct.Currency as [Currency (Default)]\n        ,ct.CustGroup as [Customer Group Id]\n        ,cg.Name as [Customer Group Name]\n        ,ct.DlvMode as [Delivery Mode (Default)]\n        ,ct.DlvTerm as [Delivery Terms (Default)]\n        ,ct.PaymMode as [Payment Mode (Default)]\n        -- PriceGroup\n        -- SalesDistrictId\n        -- SalesGroup\n        -- SalesPoolId\n        -- SegmentId\n        -- StatisticsGroup\n        -- SubSegmentId\n        -- TaxGroup\n        -- DefaultDimension\n        -- LineOfBusiness\n        -- FirstSalesOrderEntryDate\n        -- LastSalesOrderEntryDate\n    from raw.CustTable ct\n         inner join raw.DirPartyTable dpt on ct.Party = dpt.RecId\n         inner join raw.CustGroup cg on \ngo\n\nselect top 100 * from raw.DirPartyTable\nselect top 1000 * from raw.CustGroup where dataareaid = 'USMF'\nselect top 1000 * from raw.CustTable where dataareaid = 'USMF'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dCustomerItem_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.dCustomerItem') is not null) \n   drop view stoneridge.dCustomerItem\ngo\n\ncreate view stoneridge.dCustomerItem as\n  select cvei.CustVendRelation as [Account Number]\n        ,cvei.ItemId as [Item Id]\n        ,cvei.ExternalItemId as [External Item Id]\n        ,cvei.DataAreaId -- optional, comment out if only one company\n    from CustVendExternalItem cvei\n   where cvei.ModuleType = 4 -- ModuleInventPurchSalesVendCustGroup::Cust\n/* Test\nselect top 100 * from stoneridge.dCustomerItem\nselect 'stoneridge.dCustomerItem', count(*) as NumberOfRows from stoneridge.dCustomerItem union\nselect 'CustVendExternalItem', count(*) from CustVendExternalItem where ModuleType = 4\n*/\ngo\n\n\nselect AccountCode, count(*) from PriceDiscTable group by AccountCode\nselect top 100 * from PriceDiscTable where AccountCode = 0 -- PriceDiscPartyCodeType::Table\nselect top 100 * from PriceDiscTable where AccountCode = 1 -- PriceDiscPartyCodeType::Group\nselect top 100 * from PriceDiscTable where AccountCode = 2 -- PriceDiscPartyCodeType::All\n\nselect Relation, count(*) from PriceDiscTable group by Relation\nselect top 100 * from PriceDiscTable where Relation = 0 -- PriceType::PricePurch\nselect top 100 * from PriceDiscTable where Relation = 4 -- PriceType::PriceSales\nselect top 100 * from PriceDiscTable where Relation = 5 -- PriceType::LineDiscSales\n\nselect ItemCode, count(*) from PriceDiscTable group by ItemCode\nselect top 100 * from PriceDiscTable where ItemCode = 0 -- PriceDiscProductCode::Table\nselect top 100 * from PriceDiscTable where ItemCode = 2 -- PriceDiscProductCode::All\n\n\nselect AccountCode, Relation, ItemCode, count(*) \n  from PriceDiscTable \n where DataAreaId = 'DUS'\n   and Relation <> 0 -- PriceType::PricePurch\n   and cast(getdate() as date) between FromDate \n                                   and case when ToDate = cast('1/1/1900' as datetime) then cast('1/1/2100' as datetime) else ToDate end\n group by AccountCode, Relation, ItemCode\n order by 1, 2, 3\n\nselect top 100 AccountCode, Relation, ItemCode, AccountRelation, ItemRelation, Amount, Percent1, *\n  from PriceDiscTable \n where DataAreaId = 'DUS'\n   and Relation <> 0 -- PriceType::PricePurch\n   and cast(getdate() as date) between FromDate \n                                   and case when ToDate = cast('1/1/1900' as datetime) then cast('1/1/2100' as datetime) else ToDate end\n order by 1, 2, 3\n\nselect top 100\n       1 as ApplicationOrder\n      ,pdt.AccountRelation as [Account Number]\n      ,pdt.ItemRelation as [Item Id]\n      ,pdt.Amount * (1 - pdt.Percent1/100) as [Customer Price]\n  from PriceDiscTable pdt\n where pdt.DataAreaId = 'DUS'\n   and pdt.Relation = 5    -- Apply discount percent\n   and pdt.AccountCode = 0 -- Specific customer\n   and pdt.ItemCode = 0    -- Specific item\n   and cast(getdate() as date) between pdt.FromDate \n                                   and case when pdt.ToDate = cast('1/1/1900' as datetime) then cast('1/1/2100' as datetime) else pdt.ToDate end\n\nselect count(*) from PriceDiscTable pdt\n where cast(getdate() as date) between pdt.FromDate \n                                   and case when pdt.ToDate = cast('1/1/1900' as datetime) then cast('1/1/2100' as datetime) else pdt.ToDate end\nselect top 100\n       2 as ApplicationOrder\n      ,ct.AccountNum as [Account Number]\n      ,pdt.ItemRelation as [Item Id]\n      ,pdt.Amount as [Customer Price]\n  from PriceDiscTable pdt\n         inner join CustTable ct on ct.PriceGroup = pdt.AccountRelation and ct.DataAreaId = pdt.DataAreaId\n where pdt.DataAreaId = 'DUS'\n   and pdt.Relation = 4    -- Use specified price\n   and pdt.AccountCode = 1 -- For a customer group\n   and pdt.ItemCode = 0    -- For a specified item\n   and cast(getdate() as date) between pdt.FromDate \n                                   and case when pdt.ToDate = cast('1/1/1900' as datetime) then cast('1/1/2100' as datetime) else pdt.ToDate end\n\nselect top 100\n       3 as ApplicationOrder\n      ,ct.AccountNum as [Account Number]\n      ,it.ItemId as [Item Id]\n      ,pdt.Amount as [Customer Price]\n  from PriceDiscTable pdt\n         inner join CustTable ct on ct.PriceGroup = pdt.AccountRelation and ct.DataAreaId = pdt.DataAreaId\n         inner join InventTable it on it.DataAreaId = pdt.DataAreaId\n where pdt.DataAreaId = 'DUS'\n   and pdt.Relation = 5    -- Apply discount percent\n   and pdt.AccountCode = 1 -- For a customer group\n   and pdt.ItemCode = 2    -- All items\n   and cast(getdate() as date) between pdt.FromDate \n                                   and case when pdt.ToDate = cast('1/1/1900' as datetime) then cast('1/1/2100' as datetime) else pdt.ToDate end\n\nselect CustVendRelation as [Account Number]\n      ,ItemId as [Item Id]\n      ,ExternalItemId as [External Item Id]\n  from CustVendExternalItem cvei\n\n\nselect AccountRelation, count(*) \n  from PriceDiscTable \n where AccountCode = 1 and DataAreaId = 'DUS'\ngroup by AccountRelation\n\nselect LineDisc, count(*) from CustTable group by LineDisc\nselect PriceGroup, count(*) from CustTable group by PriceGroup\n\nselect top 100 PriceGroup from CustTable where DataAreaId = 'Dca'\nselect top 100 * from PRICEDISCGROUP",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dynamics365_financeandoperations_d365techdelivery_dev_sandbox",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dCustomer_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.dCustomer') is not null) \n   drop view stoneridge.dCustomer\ngo\n\ncreate view stoneridge.dCustomer as\nselect ct.AccountNum as [Account Number]\n      ,ct.PriceGroup as [Default Price Group]\n      ,dpt.Name as [Customer Name]\n      ,ct.DataAreaId -- optional, comment out if only one company\n  from CustTable ct\n         inner join DirPartyTable dpt on dpt.RecId = ct.Party\n /* Test\nselect top 100 * from stoneridge.dCustomer where [Default Price Group] is not null\nselect 'CustTable', count(*) from CustTable\nselect 'stoneridge.dCustomer', count(*) from stoneridge.dCustomer\n\nChange data:\nselect top 100 * from _cdc_CustTable\nselect top 100 * from _cdc_DirPartyTable\n\nMonitoring updates:\nselect RecId, AccountNum, CustGroup, Currency from _cdc_CustTable\nselect RecId, AccountNum, CustGroup, Currency from CustTable where AccountNum = 'DE-001'\n*/\ngo\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "dynamics365_financeandoperations_d365techdelivery_dev_sandbox",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dDate')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "use FnO\ngo\n\ncreate view raw.vw_dDate as \nWITH baseDateTable as (\n    SELECT d as [Date]\n        ,DATEPART(DAY, d) as [Day]\n        ,DATEPART(MONTH, d) as [Month]\n        ,CONVERT(DATE, DATEADD(MONTH, DATEDIFF(MONTH, 0, d), 0)) as [FirstOfMonth]\n        ,DATENAME(MONTH, d) as [MonthName]\n        ,DATEPART(WEEK, d) as [Week]\n        ,DATEPART(ISO_WEEK, d) as [ISOweek]\n        ,DATEPART(WEEKDAY, d) as [DayOfWeek]\n        ,DATEPART(QUARTER, d) as [Quarter]\n        ,DATEPART(YEAR, d) as [Year]\n        ,CONVERT(DATE, DATEADD(YEAR,  DATEDIFF(YEAR,  0, d), 0)) as [FirstOfYear]\n        ,CONVERT(CHAR(8), d, 112) as [Style112]\n        ,CONVERT(CHAR(10), d, 101) as [Style101]\n    FROM\n    (\n        SELECT d = DATEADD(DAY, rn -1, '1/1/2010')\n        FROM \n        (\n            SELECT TOP (DATEDIFF(DAY, '1/1/2010', '12/31/2039')) \n            rn = ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) \n            FROM dw.fGeneralLedger AS s1\n            CROSS JOIN dw.fGeneralLedger AS s2\n        ) AS x\n    ) AS y\n)\nSELECT\n  [Date] as [Key], -- Redundant, for symetrical purposes. May cause confusion, can be removed \n  [Date],\n  CONVERT(INT, Style112) as [DateAsInt],\n  CONVERT(TINYINT, [day]) as [Day],\n  CONVERT(TINYINT, [DayOfWeek]) as [Weekday],\n  CONVERT(VARCHAR(10), DATENAME(WEEKDAY, [Date])) as [WeekDayName],\n  CONVERT(TINYINT, ROW_NUMBER() OVER (PARTITION BY FirstOfMonth, [DayOfWeek] ORDER BY [Date])) as [DOWInMonth],\n  CONVERT(SMALLINT, DATEPART(DAYOFYEAR, [Date])) as [DayOfYear],\n  CONVERT(TINYINT, DENSE_RANK() OVER (PARTITION BY [year], [month] ORDER BY [week])) as [WeekOfMonth],\n  CONVERT(TINYINT, [Week]) as [WeekOfYear],\n  CONVERT(TINYINT, ISOWeek) as [ISOWeekOfYear],\n  CONVERT(TINYINT, [month]) as [Month],\n  CONVERT(VARCHAR(10), [MonthName]) as [MonthName],\n  CONVERT(TINYINT, [Quarter]) as Quarter,\n  CONVERT(VARCHAR(6), CASE [quarter] WHEN 1 THEN 'First' WHEN 2 THEN 'Second' WHEN 3 THEN 'Third' WHEN 4 THEN 'Fourth' END) as [QuarterName], \n  [Year],\n  CONVERT(CHAR(7), CONVERT(varchar(2), [Month]) + '/' + CONVERT(varchar(4), [Year])) as [MMYYYY],\n  CONVERT(CHAR(8), CONVERT(varchar(3),[MonthName]) + ' ' + CONVERT(varchar(4), [Year])) as [MonthYear],\n  [FirstOfMonth],\n  MAX([Date]) OVER (PARTITION BY [year], [month]) as [LastDayOfMonth],\n  MIN([Date]) OVER (PARTITION BY [year], [quarter]) as [FirstDayOfQuarter],\n  MAX([Date]) OVER (PARTITION BY [year], [quarter]) as [LastDayOfQuarter],\n  [FirstOfYear] as [FirstDayOfYear],\n  MAX([Date]) OVER (PARTITION BY [year]) as [LastDayOfYear],\n  DATEADD(MONTH, 1, FirstOfMonth) as [FirstDayOfNextMonth],\n  DATEADD(YEAR,  1, FirstOfYear) as FirstDayOfNextYear\nFROM baseDateTable\n\n/*\n-- Need to delete the storage in data lake\ndrop external table dw.dDate\ngo\n\n*/\n\nSET DATEFIRST 7;\nSET DATEFORMAT mdy;\n\ncreate external table dw.dDate with (\n    location = 'DataWarehouse/dDate'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select * from raw.vw_dDate\ngo\n\n-- select * from raw.vw_dDate\n-- select * from dw.dDate",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dDefaultDimension_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.dDefaultDimension') is not null) \n   drop view stoneridge.dDefaultDimension\ngo\n\ncreate view [stoneridge].[dDefaultDimension] as\n  select davs.RecId\n        ,davs.CostCenterValue as [Cost Center]\n        ,davs.CustomerTypeValue as [Customer Type]\n        ,davs.FinancialProductCategoryValue as [Financial Product Category Code]\n        ,dft.Description as [Financial Product Category]\n        ,davs.LegalEntityValue as [Legal Entity]\n        ,davs.LocationValue as [Location]\n        ,davs.SalesChannelValue as [Sales Channel]\n        ,davs.SalesPersonValue as [Sales Person]\n        ,davs.CustomerGroupValue as [Customer Group]\n    from DimensionAttributeValueSet davs\n           left outer join DimensionFinancialTag dft on dft.Value = davs.FinancialProductCategoryValue \n/* Testing\nselect top 100 * from DimensionAttributeValueSet\nselect top 100 * from stoneridge.dDefaultDimension\nselect top 100 * from stoneridge.dDefaultDimension where [Sales Channel] is not null\nselect 'DimensionAttributeValueSet', count(*) from DimensionAttributeValueSet\nselect 'stoneridge.dDefaultDimension', count(*) from stoneridge.dDefaultDimension\n*/\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dDepartment')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "use FnO\ngo\n\ncreate or alter view raw.vw_dDepartment as \n  select t1.RecId as [Key]\n        ,t1.OMOperatingUnitNumber as Dept\n        ,t1.Name as Department \n    from raw.DirPartyTable t1 \n   where t1.OMOperatingUnitType = 1 \n     and t1.InstanceRelationType = 8363\ngo\n\n/*\n-- Need to delete the storage in data lake\ndrop external table dw.dDepartment\ngo\n*/\n\ncreate external table dw.dDepartment with (\n    location = 'DataWarehouse/dDepartment'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select * from raw.vw_dDepartment\ngo\n\n-- select * from raw.vw_dDepartment\n-- select * from dw.dDepartment",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dFinancialDimension_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.dFinancialDimension') is not null) \n   drop view stoneridge.dFinancialDimension\ngo\n\ncreate view stoneridge.[dFinancialDimension] as\n  select davc.RecId\n        ,case davc.LedgerDimensionType when 0 then 'Account'\n                                       when 1 then 'Default Account'\n                                       when 2 then 'Budget'\n                                       when 3 then 'Budget Control'\n                                       when 4 then 'Budget Planning'\n                                       else 'Unknown'\n         end as [Ledger Dimension Type]                                       \n        ,m.MainAccountId as [Main Account Number]\n        ,m.Name as [Main Account]\n        ,case m.Type when 0 then ''\n                     when 1 then 'Profit and Loss'\n                     when 2 then 'Revenue'\n                     when 3 then 'Expense'\n                     when 4 then 'Balance Sheet'\n                     when 5 then 'Asset'\n                     when 6 then 'Liability'\n                     when 7 then 'Equity'\n                     when 8 then 'Total'\n                     when 9 then 'Reporting'\n                     else 'Unknown' end as [Main Account Type]\n        ,davc.DisplayValue as [Display]\n        ,davc.CostCenterValue as [Cost Center]\n        ,davc.CustomerTypeValue as [Customer Type]\n        ,davc.FinancialProductCategoryValue as [Financial Product Category Code]\n        ,dft.Description as [Financial Product Category]\n        ,davc.LegalEntityValue as [Legal Entity]\n        ,davc.LocationValue as [Location]\n        ,davc.SalesChannelValue as [Sales Channel]\n        ,davc.SalesPersonValue as [Sales Person]\n        ,davc.CustomerGroupValue as [Customer Group]\n    from DimensionAttributeValueCombination davc\n           left outer join DimensionFinancialTag dft on dft.Value = davc.FinancialProductCategoryValue \n           left outer join MainAccount m on m.RecId = davc.MainAccount\n\n/* Testing\nselect top 100 * from stoneridge.dFinancialDimension\nselect top 100 * from DimensionAttributeValueCombination\nselect top 100 * from stoneridge.dFinancialDimension where [Sales Channel] is not null\nselect 'DimensionAttributeValueCombination', count(*) from DimensionAttributeValueCombination\nselect 'stoneridge.dFinancialDimension', count(*) from stoneridge.dFinancialDimension\nselect [Ledger Dimension Type], count(*) from stoneridge.dFinancialDimension group by [Ledger Dimension Type]\n\n// To expand the Sale Person attribute...\nselect * from DimensionFinancialTag where FinancialTagCategory = '5637144583'\n*/\ngo",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dInventoryDimension')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW/InProgress"
				},
				"content": {
					"query": "use FnO\ngo\n\n-- Need to delete the storage in data lake\ndrop external table dw.dInventoryDimension\ngo\n\ncreate external table dw.dInventoryDimension with (\n    location = 'DataWarehouse/dInventoryDimension'\n   ,data_source = ParquetStorage\n   ,file_format = ParquetFormat\n) as \nwith inventoryDimensions as (\n    select InventDimId\n        ,upper(id.DataAreaId) as DataAreaId\n        ,coalesce(s.SiteId, '') as InventSiteId\n        ,coalesce(s.Name, 'Unknown') as SiteName\n        ,coalesce(l.InventLocationId, '') as InventLocationId\n        ,coalesce(l.Name, 'Unknown') as LocationName\n        ,coalesce(l.InventLocationType, -1) as InventLocationType_Enum\n        ,coalesce(case InventLocationType when 0 then 'Standard' when 1 then 'Quarantine' when 2 then 'Transit' else 'Other' end, 'Unknown') as InventLocationType\n        ,coalesce(w.wMSLocationId, '') as wMSLocationId\n    from raw.InventDim id\n        left outer join raw.InventSite s on s.SiteId = id.InventSiteId and s.DataAreaId = id.DataAreaId\n        left outer join raw.WMSLocation w on w.wMSLocationId = id.wMSLocationId and w.DataAreaId = id.DataAreaId\n        left outer join raw.InventLocation l on l.InventLocationId = id.InventLocationId and l.DataAreaId = id.DataAreaId\n)\nselect cast(row_number() over(order by DataAreaId, InventDimId) as int) AS [Key]\n      ,InventDimId\n      ,DataAreaId\n      ,InventSiteId\n      ,SiteName\n      ,InventLocationId\n      ,LocationName\n      ,InventLocationType\n      ,wMSLocationId\n  from inventoryDimensions\n order by 1\ngo\n\nselect * \n  from dw.dInventoryDimension \n where wMSLocationId <> '' InventLocationType = 'Quarantine'\ngo",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dInventoryDimension_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.dInventoryDimension') is not null) \n   drop view stoneridge.dInventoryDimension\ngo\n\ncreate view stoneridge.dInventoryDimension as\nselect InventDimId\n      ,InventBatchId as [Batch Id]\n      ,InventStatusId as [Inventory Status]\n      ,InventSiteId as [Site]\n      ,InventLocationId as [Warehouse]\n      ,wmsLocationId as [Warehouse Location]\n      ,DataAreaId\n  from InventDim\n/* Test\nselect top 100 * from InventDim where \nselect count(*) from InventDim\nselect count(*) from stoneridge.dInventoryDimension\n*/\ngo\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dItem')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW/InProgress"
				},
				"content": {
					"query": "select top 100 ItemId\n              ,upper(DataAreaId) as DataAreaId\n              ,coalesce(Name , 'Unknown') as Name\n              ,CostCenter, CostCenterValue\n  from raw.InventTable it\n    left outer join raw.EcoResProductTranslation n on n.Product = it.Product and LanguageId = 'EN-US'\n    left outer join raw.DimensionAttributeValueSet d on d.RecId = it.DefaultDimension\n\n\nselect * from raw.DimensionAttributeValueSet d inner join raw.InventTable it on it.DefaultDimension = d.RecId\n\nSELECT T1.DISPLAYVALUE AS DISPLAYVALUE, T1.DIMENSIONATTRIBUTEVALUESET AS DEFAULTDIMENSION, T1.PARTITION AS PARTITION, T1.RECID AS RECID, T2.ENTITYINSTANCE AS ENTITYINSTANCE, T2.PARTITION AS PARTITION#2, T3.REPORTCOLUMNNAME AS REPORTCOLUMNNAME, T3.RECID AS DIMENSIONATTRIBUTEID, T3.BACKINGENTITYTYPE AS BACKINGENTITYTYPE, T3.KEYATTRIBUTE AS KEYATTRIBUTE, T3.NAMEATTRIBUTE AS NAMEATTRIBUTE, T3.NAME AS NAME, T3.PARTITION AS PARTITION#3 \nFROM DIMENSIONATTRIBUTEVALUESETITEM T1 \nCROSS JOIN DIMENSIONATTRIBUTEVALUE T2 \nCROSS JOIN DIMENSIONATTRIBUTE T3 \nWHERE((( T1.DIMENSIONATTRIBUTEVALUE  =  T2.RECID)  AND ( T1.PARTITION  =  T2.PARTITION))  AND (( T2.DIMENSIONATTRIBUTE  =  T3.RECID)  AND ( T2.PARTITION  =  T3.PARTITION)))\n\nselect t.name, c.name \n      from sys.all_columns c \n             inner join \n           sys.tables t \n             on t.object_id = c.object_id \n     where t.name = 'DimensionAttributeValueSet'\n\n\nselect distinct CostCenter, CostCenterValue from raw.DimensionAttributeValueSet\nselect * from raw.DimensionFinancialTag\nselect * from raw.FinancialTagCategory\n\nselect\n    gje.AccountingDate as AccountingDate,\n    gje.DocumentDate as DocumentDate,\n    gje.DocumentNumber as DocumentNumber,\n\tgje.JournalNumber as JournalNumber,\n\tdavc.DisplayValue as LedgerDimension,\n\tgjae.MainAccount as MainAccount_FK,\n    davc.CostCenter as CostCenter_FK,\n    davc.Department as Department_FK,\n    davc.BusinessUnit as BusinessUnit_FK,\n    davc.ItemGroup as ItemGroup_FK,\n\tl.RECID as LegalEntity_FK,\n    gjae.ACCOUNTINGCURRENCYAMOUNT as [Amount(AccountingCurrency)],\n    l.ACCOUNTINGCURRENCY as AccountingCurrency,\n\tgjae.REPORTINGCURRENCYAMOUNT as [Amount(ReportingCurrency)],\n\tl.REPORTINGCURRENCY as ReportingCurrency,\n\tgjae.TransactionCurrencyAmount as [Amount(TransactionCurrency)],\n\tgjae.TransactionCurrencyCode as TransactionCurrency,\n\tgje.SubLedgerVoucher as SubLedgerVoucher\nfrom raw.GeneralJournalAccountEntry gjae\njoin raw.GeneralJournalEntry gje on gjae.GeneralJournalEntry = gje.RECID\njoin raw.Ledger l on gje.Ledger = l.RECID\njoin raw.DimensionAttributeValueCombination davc on gjae.LedgerDimension = davc.RECID",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dItemGroup')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "use FnO\ngo\n\ncreate view raw.vw_dItemGroup as \n  select ig.RecId as [Key]\n        ,ig.ItemGroupId\n\t      ,ig.Name as ItemGroup\n    from raw.InventItemGroup ig\ngo\n\n/*\n-- Need to delete the storage in data lake\ndrop external table dw.dItemGroup\ngo\n*/\n\ncreate external table dw.dItemGroup with (\n    location = 'DataWarehouse/dItemGroup'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select * from raw.vw_dItemGroup\ngo\n\n-- select * from raw.vw_dItemGroup\n-- select * from dw.dItemGroup",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dItem_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.dItem') is not null) \n   drop view stoneridge.dItem\ngo\n\ncreate view stoneridge.dItem as\nwith\ncategoryPivot as (\n  select erpc.Product \n        ,min(case erch.Name when 'CA Ecommerce' then erc.Name end) as [CA Ecommerce]\n        ,min(case erch.Name when 'Color' then erc.Name end) as [Color]\n        ,min(case erch.Name when 'Exclusive For' then erc.Name end) as [Exclusive For]\n        ,min(case erch.Name when 'Financial Reporting Category' then erc.Name end) as [Financial Reporting Category]\n        ,min(case erch.Name when 'Global Design' then erc.Name end) as [Global Design]\n        ,min(case erch.Name when 'Group Class' then erc.Name end) as [Group Class]\n        ,min(case erch.Name when 'Group Color' then erc.Name end) as [Group Color]\n        ,min(case erch.Name when 'Group Department' then erc.Name end) as [Group Department]\n        ,min(case erch.Name when 'Group Division' then erc.Name end) as [Group Division]\n        ,min(case erch.Name when 'Group Product Type' then erc.Name end) as [Group Product Type]\n        ,min(case erch.Name when 'Made-of' then erc.Name end) as [Made-of]\n        ,min(case erch.Name when 'New releases' then erc.Name end) as [New releases]\n        ,min(case erch.Name when 'Procurement' then erc.Name end) as [Procurement]\n        ,min(case erch.Name when 'Retail Brand' then erc.Name end) as [Retail Brand]\n        ,min(case erch.Name when 'Retail Capacity' then erc.Name end) as [Retail Capacity]\n        ,min(case erch.Name when 'Retail Class' then erc.Name end) as [Retail Class]\n        ,min(case erch.Name when 'Retail Cookware Promo' then erc.Name end) as [Retail Cookware Promo]\n        ,min(case erch.Name when 'Retail Department' then erc.Name end) as [Retail Department]\n        ,min(case erch.Name when 'Retail Division' then erc.Name end) as [Retail Division]\n        ,min(case erch.Name when 'Retail Local Color' then erc.Name end) as [Retail Local Color]\n        ,min(case erch.Name when 'Retail Material' then erc.Name end) as [Retail Material]\n        ,min(case erch.Name when 'Retail Quality' then erc.Name end) as [Retail Quality]\n        ,min(case erch.Name when 'Retail Range' then erc.Name end) as [Retail Range]\n        ,min(case erch.Name when 'Retail Shape' then erc.Name end) as [Retail Shape]\n        ,min(case erch.Name when 'Retail Size' then erc.Name end) as [Retail Size]\n        ,min(case erch.Name when 'Retail Tools Promo' then erc.Name end) as [Retail Tools Promo]\n        ,min(case erch.Name when 'US DTC Distribution' then erc.Name end) as [US DTC Distribution]\n        ,min(case erch.Name when 'Used-for' then erc.Name end) as [Used-for]\n  from EcoResProductCategory erpc \n       left outer join EcoResCategoryHierarchy erch on erch.RecId = erpc.CategoryHierarchy\n       left outer join EcoResCategory erc on erc.RecId = erpc.Category\n group by erpc.Product \n),\nenglishProductNames as (\n  select erpt.Product\n        ,erpt.Name as [Product Name]\n        ,erpt.Description as [Product Description]\n    from EcoResProductTranslation erpt\n where erpt.LanguageId = 'En-US'\n),\nbatchAttributePivot as (\n  select pba.ItemId\n        ,min(case pba.PdsBatchAttribId when 'MID' then pba.PdsBatchAttribValue end) as [Prism Id]\n        ,min(case pba.PdsBatchAttribId when 'COO' then pba.PdsBatchAttribValue end) as [Country of Origin]\n        ,min(case pba.PdsBatchAttribId when 'Full CI Weight (Kg)' then pba.PdsBatchAttribValue end) as [Full CI Weight (Kg)]\n--??        ,min(case pba.PdsBatchAttribId when 'Gross Weight (Kg)' then pba.PdsBatchAttribValue end) as [Gross Weight (Kg)]\n--??        ,min(case pba.PdsBatchAttribId when 'Net weight (Kg)' then pba.PdsBatchAttribValue end) as [Net weight (Kg)]\n    from PdsBatchAttributes pba\n           inner join InventBatch ib on ib.ItemId = pba.ItemId and ib.InventBatchId = pba.InventBatchId\n   where ib.AMERPrimaryBatch = 1\n     and ib.DataAreaId = 'DUS'\n     and pba.DataAreaId = 'DUS' \n   group by pba.ItemId\n),\nitemCost as (\n  select ItemId\n        ,avg(Price/PriceUnit) as [Average Unit Cost]\n    from InventItemPrice iips\n   where ActivationDate <= cast(getDate() as date)\n     and CostingType = 3 -- InventItemCostingType::Last\n     and DataAreaId = 'DUS'\n   group by ItemId\n)\n--primaryBatchBarcode as (\n--  select iibc.ItemId\n--        ,iibc.ItemBarCode as [Primary Barcode]\n--    from InventItemBarcode iibc\n--           left outer join InventBatch ib on ib.ItemId = iibc.ItemId \n--                                         and ib.AMERPrimaryBatch = 1\n--  where ib.DataAreaId = 'DUS'\n--    and iibc.DataAreaId = 'DUS'\n--    and iibc.InventDimId = 'AllBlank' \n--    and iibc.Qty = 1\n--)\nselect it.ItemId as [Item Id]\n      ,epn.[Product Name]\n      ,epn.[Product Description]\n      ,it.DefaultDimension as [Default Dimension RecId]\n--      ,pb.[Primary Barcode]\n      ,[CA Ecommerce]\n      ,[Color]\n      ,[Exclusive For]\n      ,[Financial Reporting Category]\n      ,[Global Design]\n      ,[Group Class]\n      ,[Group Color]\n      ,[Group Department]\n      ,[Group Division]\n      ,[Group Product Type]\n      ,[Made-of]\n      ,[New releases]\n      ,[Procurement]\n      ,[Retail Brand]\n      ,[Retail Capacity]\n      ,[Retail Class]\n      ,[Retail Cookware Promo]\n      ,[Retail Department]\n      ,[Retail Division]\n      ,[Retail Local Color]\n      ,[Retail Material]\n      ,[Retail Quality]\n      ,[Retail Range]\n      ,[Retail Shape]\n      ,[Retail Size]\n      ,[Retail Tools Promo]\n      ,[US DTC Distribution]\n      ,[Used-for]\n      ,erpls.StateId as [Product Lifecycle State Id]\n      ,erpls.Description as [Product Lifecycle State]\n      ,[Prism Id]\n      ,[Country of Origin]\n      ,CAST([Full CI Weight (Kg)] as DECIMAL(10,2)) as [Full CI Weight (Kg)]\n      ,CAST([Full CI Weight (Kg)] as DECIMAL(10,2)) / 1000 as [Full CI Weight (Ton)]\n      ,[Average Unit Cost]\n--    ,[Gross Weight (Kg)]\n--    ,[Net weight (Kg)]\n  from InventTable it\n         left outer join englishProductNames epn on epn.Product = it.Product\n         left outer join categoryPivot cp on cp.Product = it.Product\n--         left outer join primaryBatchBarcode pb on pb.ItemId = it.ItemId \n         left outer join batchAttributePivot bap on bap.ItemId = it.ItemId\n         left outer join EcoResProductLifecycleState erpls on erpls.StateId = it.ProductLifecycleStateId\n         left outer join itemCost ic on ic.ItemId = it.ItemId\n where it.DataAreaId = 'DUS'\n/* Test\nselect top 100 * from stoneridge.dItem\nselect 'InventTable', count(*) from InventTable where DataAreaId = 'DUS' -- 6542\nselect 'stoneridge.dItem', count(*) from stoneridge.dItem -- 6542 (should be the same as above)\nselect 'Dim_ItemHierarchy', count(*) from Dim_ItemHierarchy -- 535769\n*/\ngo\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dLegalEntity')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "use FnO\ngo\n\ncreate view raw.vw_dLegalEntity as \n  select l.RecId as [Key]\n        ,upper(dpt.DataArea) as DataAreaId\n        ,dpt.Name as CompanyName   \n    from raw.Ledger l\n         inner join raw.DirPartyTable dpt on l.PrimaryForLegalEntity = dpt.RecId\ngo\n\n/*\n-- Need to delete the storage in data lake\ndrop external table dw.dLegalEntity\ngo\n*/\n\ncreate external table dw.dLegalEntity with (\n    location = 'DataWarehouse/dLegalEntity'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select * from raw.vw_dLegalEntity\ngo\n\n-- select * from raw.vw_dLegalEntity\n-- select * from dw.dLegalEntity",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dMainAccount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "use FnO\ngo\n\ndrop view raw.vw_dMainAccount\ngo\n\ncreate view raw.vw_dMainAccount as \n  select m.RecId as [Key]\n\t      ,m.MainAccountId as MainAccount\n\t      ,m.Name\n          ,m.Type_$Label as AccountType\n          ,coalesce(ac.AccountCategory, 'Undefined') as AccountCategory\n          ,coalesce(ac.AccountType_$Label, 'Undefined') as AccountCategoryType\n\t      ,l.Name as ChartOfAccountName \n    from raw.MainAccount m\n         inner join raw.LedgerChartOfAccounts l on l.RecId = m.LedgerChartOfAccounts and l.Partition = m.Partition\n         left outer join raw.MainAccountCategory ac on ac.AccountCategoryRef = m.AccountCategoryRef and ac.Partition = m.Partition\ngo\n\n/*\n-- Need to delete the storage in data lake\ndrop external table dw.dMainAccount\ngo\n*/\n\ncreate external table dw.dMainAccount with (\n    location = 'DataWarehouse/dMainAccount'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select * from raw.vw_dMainAccount\ngo\n\n/* Testing\nselect * from raw.MainAccount\nselect * from raw.LedgerChartOfAccounts\nselect * from raw.vw_dMainAccount where ChartOfAccountName = 'Shared'\nselect * from dw.dMainAccount where ChartOfAccountName = 'Shared'\nselect count(*) from dw.dMainA\n\n// TODO: BUG FIX REQUIRED\nselect count(*) from raw.MainAccount -- 4751\nselect count(*) from raw.vw_dMainAccount -- 5056\n\nselect * from raw.MainAccountCategory order by AccountCategoryRef\n\nselect *\n  from   raw.MainAccount m\n         left outer join raw.MainAccountCategory ac on ac.AccountCategoryRef = m.AccountCategoryRef and ac.Partition = m.Partition\n where ac.RecId is null\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fBacklog')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW/InProgress"
				},
				"content": {
					"query": "select top 200 SalesId, DataAreaId, CostPrice, CustAccount, SalesStatus, SalesType, ItemId, ConfirmedDlv, InventDimId, DefaultDimension, LineNum, LineDisc, LinePercent, LineAmount, DlvMode, DlvTerm, QtyOrdered, RemainInventPhysical\n      ShippingDateRequested, ShippingDateConfirmed, SalesCategory, TaxGroup, TaxItemGroup, CreatedDateTime, ModifiedDateTime, * from raw.SalesLine\n\nuse FnO\ngo\n\n-- Need to delete the storage in data lake\ndrop external table dw.fSalesOrder\ngo\n\ncreate external table dw.fSalesOrder with (\n    location = 'DataWarehouse/fSalesOrder'\n   ,data_source = ParquetStorage\n   ,file_format = ParquetFormat\n) as \nwith inventoryDimensions as (\n    select InventDimId\n        ,upper(id.DataAreaId) as DataAreaId\n        ,coalesce(s.SiteId, '') as InventSiteId\n        ,coalesce(s.Name, 'Unknown') as SiteName\n        ,coalesce(l.InventLocationId, '') as InventLocationId\n        ,coalesce(l.Name, 'Unknown') as LocationName\n        ,coalesce(l.InventLocationType, -1) as InventLocationType_Enum\n        ,coalesce(case InventLocationType when 0 then 'Standard' when 1 then 'Quarantine' when 2 then 'Transit' else 'Other' end, 'Unknown') as InventLocationType\n        ,coalesce(w.wMSLocationId, '') as wMSLocationId\n    from raw.InventDim id\n        left outer join raw.InventSite s on s.SiteId = id.InventSiteId and s.DataAreaId = id.DataAreaId\n        left outer join raw.WMSLocation w on w.wMSLocationId = id.wMSLocationId and w.DataAreaId = id.DataAreaId\n        left outer join raw.InventLocation l on l.InventLocationId = id.InventLocationId and l.DataAreaId = id.DataAreaId\n)\nselect cast(row_number() over(order by DataAreaId, InventDimId) as int) AS [Key]\n      ,InventDimId\n      ,DataAreaId\n      ,InventSiteId\n      ,SiteName\n      ,InventLocationId\n      ,LocationName\n      ,InventLocationType\n      ,wMSLocationId\n  from inventoryDimensions\n order by 1\ngo\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fGeneralLedger')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "use FnO\ngo\n\ndrop view raw.vw_fGeneralLedger\ncreate view raw.vw_fGeneralLedger as \n  select gje.AccountingDate as AccountingDate,\n         gje.DocumentDate as DocumentDate,\n         gje.DocumentNumber as DocumentNumber,\n         gje.JournalNumber as JournalNumber,\n         davc.DisplayValue as LedgerDimension,\n         gjae.MainAccount as MainAccount_FK,\n         davc.CostCenter as CostCenter_FK,\n         davc.Department as Department_FK,\n         davc.BusinessUnit as BusinessUnit_FK,\n         davc.ItemGroup as ItemGroup_FK,\n         l.Recid as LegalEntity_FK,\n         gjae.AccountingCurrencyAmount as [Amount(AccountingCurrency)],\n         l.AccountingCurrency as AccountingCurrency,\n         gjae.ReportingCurrencyAmount as [Amount(ReportingCurrency)],\n         l.ReportingCurrency as ReportingCurrency,\n         gjae.TransactionCurrencyAmount as [Amount(TransactionCurrency)],\n         gjae.TransactionCurrencyCode as TransactionCurrency,\n         gjae.IsCorrection_$Label as [Correction?],\n         gjae.LedgerAccount,\n         gjae.PostingType_$Label as [PostingType],\n         gje.SubLedgerVoucher as SubLedgerVoucher\n    from raw.GeneralJournalAccountEntry gjae\n         join raw.GeneralJournalEntry gje on gjae.GeneralJournalEntry = gje.RecId\n         join raw.Ledger l on gje.Ledger = l.RecId\n         join raw.DimensionAttributeValueCombination davc on gjae.LedgerDimension = davc.RecId\ngo\n\n/*\n-- Need to delete the storage in data lake\ndrop external table dw.fGeneralLedger\ngo\n*/\n\nselect * from raw.Ledger l\nselect * from dw.dCompany\nselect * from dw.dLegalEntity\n\ncreate external table dw.fGeneralLedger with (\n    location = 'DataWarehouse/fGeneralLedger'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select * from raw.vw_fGeneralLedger\ngo\n\n/* Testing\nselect count(*) from raw.vw_fGeneralLedger\nselect count(*) from dw.fGeneralLedger\n\nselect year(AccountingDate) as Year\n      ,count(*) as AccountingEntries\n  from raw.vw_fGeneralLedger -- Using the views\n group by year(AccountingDate)\n order by 1\n\nselect year(AccountingDate) as Year\n      ,count(*) as AccountingEntries\n  from dw.fGeneralLedger\n group by year(AccountingDate)\n order by 1 \n\nselect ma.MainAccount, ma.Name, sum(f.[Amount(AccountingCurrency)]) as Total\n  from dw.fGeneralLedger f \n       inner join dw.dMainAccount ma on ma.[Key] = f.MainAccount_FK\n       inner join dw.dDate d on d.Date = f.AccountingDate\n where ma.ChartOfAccountName = 'Shared'\n   and d.Date = '2016'\n group by ma.MainAccount, ma.Name\n order by 1\n\n-- A query to build the dataflow\n\ndrop view raw.vw_GeneralLedger_Trans \ngo\n\ncreate view raw.vw_GeneralLedger_Trans as\nselect ma.MainAccount as [Account], ma.Name as [Account Name], ma.AccountType as [Account Type], ma.AccountCategory as [Account Category], ma.AccountCategoryType as [Account Category Type] --, ma.*\n      ,cc.CC as [Cost Center], cc.CostCenter as [Cost Center Name] --, cc.*\n      ,d.Dept as [Department], d.Department as [Department Name] --, d.*\n      ,bu.BU as [Business Unit], bu.BusinessUnit as [Business Unit Name] --, bu.*\n      ,ig.ItemGroupId as [Item Group], ig.ItemGroup as [Item Group Name] -- , ig.*\n      ,le.DataAreaId as [Company], le.CompanyName as [Company Name] --, le.*\n      ,gl.AccountingDate as [Accounting Date]\n      ,gl.DocumentDate as [Document Date]\n      ,gl.JournalNumber as [Journal No]\n      ,gl.LedgerAccount as [Ledger Account]\n      ,gl.PostingType as [Posting Type]\n      ,gl.[Amount(ReportingCurrency)] as Amount\n      ,gl.SubLedgerVoucher as [Sub-Ledger Voucher] -- , gl.*\n  from raw.vw_fGeneralLedger gl\n       inner join raw.vw_dMainAccount ma on ma.[Key] = MainAccount_FK\n       inner join raw.vw_dCostCenter cc on cc.[Key] = CostCenter_FK\n       inner join raw.vw_dDepartment d on d.[Key] = Department_FK\n       inner join raw.vw_dBusinessUnit bu on bu.[Key] = BusinessUnit_FK\n       inner join raw.vw_dItemGroup ig on ig.[Key] = ItemGroup_FK \n       inner join raw.vw_dLegalEntity le on le.[Key] = LegalEntity_FK\n-- where ma.ChartOfAccountName = 'Shared'\n\n select count(*) from raw.vw_GeneralLedger_Trans\n\ncreate schema dmFin\ndrop view dmFin.GeneralLedger_Trans\ncreate view dmFin.GeneralLedger_Trans as\nselect ma.MainAccount as [Account], ma.Name as [Account Name], ma.AccountType as [Account Type], ma.AccountCategory as [Account Category], ma.AccountCategoryType as [Account Category Type] --, ma.*\n      ,cc.CC as [Cost Center], cc.CostCenter as [Cost Center Name] --, cc.*\n      ,d.Dept as [Department], d.Department as [Department Name] --, d.*\n      ,bu.BU as [Business Unit], bu.BusinessUnit as [Business Unit Name] --, bu.*\n      ,ig.ItemGroupId as [Item Group], ig.ItemGroup as [Item Group Name] -- , ig.*\n      ,le.DataAreaId as [Company], le.CompanyName as [Company Name] --, le.*\n      ,gl.PostingType\n      ,gl.AccountingDate as [Accounting Date], gl.DocumentDate as [Document Date], gl.JournalNumber as [Journal No], gl.LedgerDimension as [Dimension],  gl.[Amount(ReportingCurrency)] as Amount, gl.SubLedgerVoucher as [Sub-Ledger Voucher] -- , gl.*\n  from dw.fGeneralLedger gl\n       inner join dw.dMainAccount ma on ma.[Key] = MainAccount_FK\n       inner join dw.dCostCenter cc on cc.[Key] = CostCenter_FK\n       inner join dw.dDepartment d on d.[Key] = Department_FK\n       inner join dw.dBusinessUnit bu on bu.[Key] = BusinessUnit_FK\n       inner join dw.dItemGroup ig on ig.[Key] = ItemGroup_FK \n       inner join dw.dLegalEntity le on le.[Key] = LegalEntity_FK\n where ma.ChartOfAccountName = 'Shared'\n\nselect gjae.*, ma.*\n  from raw.GeneralJournalAccountEntry gjae\n       inner join raw.MainAccount ma on ma.RecId = gjae.MainAccount and ma.Partition = gjae.Partition -- 480208\n       left outer join raw.MainAccountCategory ac on ac.AccountCategoryRef = ma.AccountCategoryRef and ac.Partition = gjae.Partition -- 465060\n where ac.RecId is null\n\n select count(*) from dw.fGeneralLedger\n select count(*) from dmFin.GeneralLedger_Trans\n  */\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fGeneralLedger_BIG')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW"
				},
				"content": {
					"query": "-- For demo purposes\ncreate external table dw.fGeneralLedger_BIG with (\n    location = 'DataWarehouse/fGeneralLedger_BIG'\n   ,data_source = ParquetDataSource\n   ,file_format = ParquetFileFormat\n) as \n    select gl.* \n      from dw.fGeneralLedger gl\n           cross join (select top(10000) row_number() over (order by A.[Key]) as N from dw.dMainAccount A cross join dw.dMainAccount B) cj\ngo\n\n-- NOTE: Too big!\n-- select count(*) from dw.fGeneralLedger_BIG\nselect count_big(*) \n  from dw.fGeneralLedger_BIG\n\nselect d.[Year]\n      ,cc.CostCenter\n      ,sum(f.[Amount(AccountingCurrency)])\n  from dw.fGeneralLedger_BIG f\n       inner join dw.dCostCenter cc on cc.[Key] = f.CostCenter_FK\n       inner join dw.dDate d on d.[Date] = f.AccountingDate\n where CostCenter in ('Quality Control', 'Administration', 'Super')\n group by cc.CostCenter, d.[Year] \n order by 1\n\n\nselect ma.MainAccount, ma.Name, sum(f.[Amount(AccountingCurrency)]) as Total\n  from dw.fGeneralLedger_BIG f \n       inner join dw.dMainAccount ma on ma.[Key] = f.MainAccount_FK\n       inner join dw.dDate d on d.Date = f.AccountingDate\n where ma.ChartOfAccountName = 'Shared'\n   and d.Date = '2016'\n group by ma.MainAccount, ma.Name\n order by 1\n\n-- Make it supersize please!\n\ncreate view raw.vw_GeneralLedger_Trans_BIG as\nselect ma.MainAccount as [Account], ma.Name as [Account Name], ma.AccountType as [Account Type], ma.AccountCategory as [Account Category], ma.AccountCategoryType as [Account Category Type] --, ma.*\n      ,cc.CC as [Cost Center], cc.CostCenter as [Cost Center Name] --, cc.*\n      ,d.Dept as [Department], d.Department as [Department Name] --, d.*\n      ,bu.BU as [Business Unit], bu.BusinessUnit as [Business Unit Name] --, bu.*\n      ,ig.ItemGroupId as [Item Group], ig.ItemGroup as [Item Group Name] -- , ig.*\n      ,le.DataAreaId as [Company], le.CompanyName as [Company Name] --, le.*\n      ,gl.AccountingDate as [Accounting Date]\n      ,gl.DocumentDate as [Document Date]\n      ,gl.JournalNumber as [Journal No]\n      ,gl.LedgerAccount as [Ledger Account]\n      ,gl.PostingType as [Posting Type]\n      ,gl.[Amount(ReportingCurrency)] as Amount\n      ,gl.SubLedgerVoucher as [Sub-Ledger Voucher] -- , gl.*\n  from raw.vw_fGeneralLedger gl\n       inner join raw.vw_dMainAccount ma on ma.[Key] = MainAccount_FK\n       inner join raw.vw_dCostCenter cc on cc.[Key] = CostCenter_FK\n       inner join raw.vw_dDepartment d on d.[Key] = Department_FK\n       inner join raw.vw_dBusinessUnit bu on bu.[Key] = BusinessUnit_FK\n       inner join raw.vw_dItemGroup ig on ig.[Key] = ItemGroup_FK \n       inner join raw.vw_dLegalEntity le on le.[Key] = LegalEntity_FK\n       cross join (select top(1000) row_number() over (order by A.[Key]) as N from dw.dMainAccount A cross join dw.dMainAccount B) cj\n\n-- 65 million rows\nselect count_big(*) \n  from raw.vw_GeneralLedger_Trans_BIG\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fInventoryTransfer_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.fInventoryTransfer') is not null) \n   drop view stoneridge.fInventoryTransfer\ngo\n\ncreate view stoneridge.fInventoryTransfer as\nselect itt.TransferId as [Transfer Id]\n      ,itl.ItemId as [Item Id]\n      ,itt.InventLocationIdFrom as [From Location]\n      ,itt.InventLocationIdTo as [To Location]\n      ,case itt.TransferStatus when 0 then 'Created'\n                              when 1 then 'Shipped'\n                              when 2 then 'Received'\n                              else 'Unknown'\n       end as [Status]\n      ,itl.CreatedDateTime as [Created DateTime]\n      ,itl.ShipDate as [Ship Date]\n      ,itl.ReceiveDate as [Receive Date]\n      ,itl.QtyTransfer as [Transfer Quantity]\n      ,itl.QtyShipped as [Shipped Quantity]\n      ,itl.QtyRemainShip as [Remaining Ship Quantity]\n      ,itl.QtyReceived as [Received Quantity]\n      ,itl.QtyRemainReceive as [Remaining Receive Quantity]\n  from InventTransferTable itt\n         inner join InventTransferLine itl on itl.TransferId = itt.TransferId and itl.DataAreaId = itt.DataAreaId\n where itt.DataAreaId = 'DUS'\n /* Test\n select count(*) from InventTransferLine where DataAreaId = 'DUS'\n select count(*) from stoneridge.fInventoryTransfer\n select top 100 * from InventTransferLine where DataAreaId = 'DUS'\n select top 100 * from stoneridge.fInventoryTransfer where [Transfer Id] = 'TR-00006121'\n */\n go \n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fInvoice')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "VirtualDW/InProgress"
				},
				"content": {
					"query": "select top 100 *\n  from raw.CustInvoiceTrans",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fInvoice_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.fInvoice') is not null) \n   drop view stoneridge.fInvoice\ngo\n\ncreate view stoneridge.fInvoice as\nselect distinct cit.InvoiceId as [Invoice Id] -- 'distinct' can be remove after bug for multiple InvoiceIds fixed\n      ,cit.ItemId as [Item Id]\n      ,cit.SalesId as [Sales Id]\n      ,cit.InvoiceDate as [Invoice Date]\n      ,cit.LineAmountMST as [Invoice Amount]\n      ,cit.Qty as [Invoice Quantity]\n      ,cit.InventTransId\n  from CustInvoiceTrans cit\n         inner join CustInvoiceJour cij on cit.InvoiceId = cij.InvoiceId and cit.DataAreaId = cij.DataAreaId\n where cij.DataAreaId = 'DUS' and cit.InventTransId is not NULL\n /* Test\n select top 100 * from stoneridge.fInvoice\n select [Invoice Id], count(*) as [Count] from stoneridge.fInvoice group by [Invoice Id] order by [Count] desc\n select InvoiceId, count(*) as [Count] from dbo.CustInvoiceJour group by InvoiceId order by [Count] desc\n */",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fPurchaseOrder_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.fPurchaseOrder') is not null) \n   drop view stoneridge.fPurchaseOrder\ngo\n\ncreate view stoneridge.fPurchaseOrder as\nwith \nconvertToUSD as (\n  select ExchangeRate/100. as ExchangeRate\n        ,ValidFrom\n        ,ValidTo\n    from ExchangeRate er\n           inner join ExchangeRateCurrencyPair ercp on ercp.RecId = er.ExchangeRateCurrencyPair\n   where FromCurrencyCode = 'EUR'\n     and ToCurrencyCode = 'USD'\n),\npoReceiveStatus as (\n  select ReferenceId as PurchId\n        ,it.ItemId\n        ,ito.InventTransId\n        ,coalesce(sum(case StatusReceipt when 1 then it.Qty end), 0) as [Purchased]\n        ,coalesce(sum(case StatusReceipt when 1 then it.CostAmountPhysical end), 0) as [Purchased Amount]\n        ,max(case StatusReceipt when 1 then it.DatePhysical end) as [Purchased Date]\n        ,coalesce(sum(case StatusReceipt when 2 then it.Qty end), 0) as [Received]\n        ,coalesce(sum(case StatusReceipt when 3 then it.Qty end), 0) as [Registered]\n        ,coalesce(sum(case StatusReceipt when 4 then it.Qty end), 0) as [Arrived]\n        ,coalesce(sum(case StatusReceipt when 5 then it.Qty end), 0) as [Ordered]\n    from InventTrans it\n           inner join InventTransOrigin ito on ito.RecId = it.InventTransOrigin and ito.DataAreaId = it.DataAreaId\n   where StatusIssue = 0 -- StatusIssue::None\n     and StatusReceipt >= 1 and StatusReceipt <= 5 -- , StatusReceipt::Purchased, StatusReceipt::Received, StatusReceipt::Registered, StatusReceipt::Arrived, StatusReceipt::Ordered\n     and ito.ReferenceCategory = 3 -- InventTransType::Purch\n   group by ReferenceId, it.ItemId, ito.InventTransId\n)\nselect pl.PurchId as [Purchase Id]\n      ,pl.ItemId as [Item Id]\n      ,pl.DeliveryDate as [Expected Delivery Date]\n      ,DocumentState as [Approval Status]\n      ,case when pt.PurchStatus in (0, 1, 2) and pl.PurchStatus in (0, 1, 2) then 'Yes' else 'No' end as [Is Open]\n      ,case pl.CurrencyCode when 'USD' then  pl.PurchPrice \n                            when 'EUR' then pl.PurchPrice * ctUSD.ExchangeRate                            \n                            else -999.99 \n       end as [Unit Price]  -- Always convert to USD\n      ,case pl.CurrencyCode when 'USD' then pl.LineAmount\n                            when 'EUR' then pl.LineAmount * ctUSD.ExchangeRate\n                            else -999.99 \n       end as [Line Amount] -- Always convert to USD\n      ,pl.InventDimId  \n      ,pl.PurchQty as [Purchase Order Quantity]\n      ,coalesce(prs.Registered, 0) as [Registered Quantity]\n      ,coalesce(prs.Ordered, 0) as [Remaining Quantity]\n      ,coalesce(prs.Purchased, 0) as [Received Quantity]\n      ,coalesce(prs.[Purchased Amount], 0) as [Received Amount]\n      ,prs.[Purchased Date] as [Last Received Date]\n  from PurchTable pt\n         inner join PurchLine pl on pl.PurchId = pt.PurchId and pl.DataAreaId = pt.DataAreaId\n         left outer join convertToUSD ctUSD on pt.ExchangeRateDate between ctUSD.ValidFrom and ctUSD.ValidTo\n         left outer join poReceiveStatus prs on prs.PurchId = pl.PurchId and prs.ItemId = pl.ItemId and prs.InventTransId = pl.InventTransId\n where pt.PurchStatus <> 4 -- Not canceled (All purchase meaningful purchase orders)\n   and pl.PurchStatus <> 4\n   and pl.IsDeleted = 0 -- NoYes::No\n/* Test\nselect top 100 * from stoneridge.fPurchaseOrder\nselect top 100 * from stoneridge.fPurchaseOrder where [Received Quantity] <> 0\n\nselect 'PurchLine', count(*) as RecCount from PurchLine where PurchStatus <> 4 and DataAreaId = 'DUS' and IsDeleted = 0 Union\nselect 'stoneridge.fPurchaseOrder', count(*) from stoneridge.fPurchaseOrder\n*/\ngo\n\n-- --------------------------------------------------\n-- Open purchase orders are a specialization of above\n-- --------------------------------------------------\n\nif (Object_Id('stoneridge.fOpenPurchaseOrder') is not null) \n   drop view stoneridge.fOpenPurchaseOrder\ngo\n\ncreate view stoneridge.fOpenPurchaseOrder as\nselect [Purchase Id]\n      ,[Item Id]\n      ,[Expected Delivery Date]\n      ,[Unit Price]\n      ,[Line Amount]\n      ,[Purchase Order Quantity]\n      ,[Registered Quantity]\n      ,[Remaining Quantity]\n      ,[Received Quantity]\n      ,[Received Amount]\n      ,[Last Received Date]\n  from stoneridge.fPurchaseOrder\n where [Is Open] = 'Yes'\n/* Test\nselect top 100 * from stoneridge.fOpenPurchaseOrder\nselect top 100 * from stoneridge.fOpenPurchaseOrder where [Registered Quantity] <> 0\nselect top 100 * from stoneridge.fOpenPurchaseOrder where [Purchase Id] = 'DUS1-PO-006740' and [Item Id] = '40106260010201'\nselect top 100 * from stoneridge.fOpenPurchaseOrder where [Purchase Id] = 'DUS1-PO-006662' and [Item Id] = '21177026444041'\n*/\ngo \n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/fSalesOrder_')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "LCoA"
				},
				"content": {
					"query": "use dynamics365_financeandoperations_d365techdelivery_dev_sandbox\ngo\n\nif (Object_Id('stoneridge.fSalesOrder') is not null) \n   drop view stoneridge.fSalesOrder\ngo\n\ncreate view stoneridge.fSalesOrder as\nselect sl.ItemId as [Item Id]                           -- recommend to hide\n      ,sl.CustAccount as [Customer Account Number]      -- recommend to hide\n      ,sl.DefaultDimension as [Default Dimension RecId] -- recommend to hide\n      ,sl.ConfirmedDlv as [Confirmed Delivery Date]\n      ,sl.CostPrice as [Unit Cost Amount]\n      ,case sl.SalesStatus when 0 then ''\n                        when 1 then 'Open'\n                        when 2 then 'Delivered'\n                        when 3 then 'Invoiced'\n                        when 4 then 'Canceled'\n                        else 'Unknown'\n       end as [Status] \n      ,case sl.DeliveryType when 0 then ''\n                           when 1 then 'Drop Ship'\n                           else 'Unknown'\n       end as [Delivery Type]\n      ,case st.SalesType when 3 then ''\n                        when 4 then 'Return'\n                        else 'Unknown'\n       end as [Sales Type]\n      ,st.SalesOriginId as [Sales Origin]\n      ,sl.SalesQty as [Sales Quantity]\n      ,sl.SalesPrice as [Unit Price]\n      ,sl.LineAmount as [Line Amount]\n      ,sl.InventDimId\n      ,sl.InventTransId\n  from SalesTable st\n         inner join SalesLine sl on sl.SalesId = st.SalesId\n where sl.SalesStatus <> 4 -- Not canceled (All meaningful sales orders)\n   and sl.DataAreaId = 'DUS'\n/* Test\nselect count(*) from stoneridge.fSalesOrder\nselect top 100 * from stoneridge.fSalesOrder\nselect top 100 * from stoneridge.fSalesOrder \n where [Status] = 'Invoiced'\nselect count(*)\n  from stoneridge.fSalesOrder oso \n         inner join stoneridge.dDefaultDimension dd on dd.RecId = oso.[Default Dimension RecId]\n         inner join stoneridge.dItem i on i.[Item Id] = oso.[Item Id]\n         inner join stoneridge.dCustomer c on c.[Account Number] = oso.[Customer Account Number]\nselect top 100 * \n  from stoneridge.fSalesOrder oso \n         inner join stoneridge.dDefaultDimension dd on dd.RecId = oso.[Default Dimension RecId]\n         inner join stoneridge.dItem i on i.[Item Id] = oso.[Item Id]\n         inner join stoneridge.dCustomer c on c.[Account Number] = oso.[Customer Account Number]\n*/\ngo\n\n-- ----------------------------------------------\n-- Open sale orders are a specialization of above\n-- ----------------------------------------------\n\nif (Object_Id('stoneridge.fOpenSalesOrder') is not null) \n   drop view stoneridge.fOpenSalesOrder\ngo\n\ncreate view stoneridge.fOpenSalesOrder as\nselect * \n  from stoneridge.fSalesOrder\n where Status in ('', 'Open', 'Delivered') -- Open sales orders\n/* Test\nselect top 100 * from stoneridge.fOpenSalesOrder\n*/\ngo ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spProfileTable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "SynapseAdmin"
				},
				"content": {
					"query": "/*\nThis script is given \"As Is\" with no warranties and plenty of caveats. Use at your own risk!\nFor more on data profiling, see Chapter 10 in \"SQL Server 2012 Data Integration Recipes\", Apress, 2012\n*/-----------------------------------------------------------------------\n-- User-defined variables\n-----------------------------------------------------------------------\nUSE fno -- Your database here\nGO\nDECLARE @TABLE_SCHEMA NVARCHAR(128) = 'raw'  -- Your schema here\nDECLARE @TABLE_NAME NVARCHAR(128) = 'InventDim' -- Your table here\nDECLARE @ColumnListIN NVARCHAR(4000) = ''    -- Enter a comma-separated list of specific columns\n                                                     -- to profile, or leave blank for all\nDECLARE @TextCol BIT = 1  -- Analyse all text (char/varchar/nvarchar) data type columns\nDECLARE @NumCol BIT = 1   -- Analyse all numeric data type columns\nDECLARE @DateCol BIT = 1  -- Analyse all date data type data type columns\nDECLARE @LobCol BIT = 1   -- Analyse all VAR(char/nchar/binary) MAX data type columns (potentially time-consuming)\nDECLARE @AdvancedAnalysis BIT = 1 -- Perform advanced analysis (threshold counts/domain analysis) \n                                  --(potentially time-consuming)\nDECLARE @DistinctValuesMinimum INT = 200 -- Minimum number of distinct values to suggest a reference \n                                         -- table and/or perform domain analysis\nDECLARE @BoundaryPercent NUMERIC(3,2) = 0.57 -- Percent of records at upper/lower threshold to suggest\n                                             -- a possible anomaly\nDECLARE @NullBoundaryPercent NUMERIC(5,2) = 90.00 -- Percent of NULLs to suggest a possible anomaly\nDECLARE @DataTypePercentage INT = 2 -- Percentage variance allowed when suggesting another data type \n                                    -- for a column\n-----------------------------------------------------------------------\n-- Process variables\n-----------------------------------------------------------------------\nDECLARE @DATA_TYPE VARCHAR(128) = ''\nDECLARE @FULLSQL VARCHAR(MAX) = ''\nDECLARE @SQLMETADATA VARCHAR(MAX) = ''\nDECLARE @NUMSQL VARCHAR(MAX) = ''\nDECLARE @DATESQL VARCHAR(MAX) = ''\nDECLARE @LOBSQL VARCHAR(MAX) = ''\nDECLARE @COLUMN_NAME VARCHAR(128)\nDECLARE @CHARACTER_MAXIMUM_LENGTH INT\nDECLARE @ROWCOUNT BIGINT = 0\nDECLARE @ColumnList VARCHAR(4000) = ' '\nDECLARE @TableCheck TINYINT\nDECLARE @ColumnCheck SMALLINT\nDECLARE @DataTypeVariance INT\n-----------------------------------------------------------------------\n-- Start the process:\nBEGIN\nTRY\n-- Test that the schema and table exist\nSELECT\n @TableCheck = COUNT (*) \n   FROM INFORMATION_SCHEMA.TABLES \n   WHERE TABLE_SCHEMA = @TABLE_SCHEMA \n   AND TABLE_NAME = @TABLE_NAME\nIF @TableCheck <> 1\n BEGIN\n  RAISERROR ('The table does not exist',16,1)\n  RETURN\n END\n-----------------------------------------------------------------------\n-- Parse list of columns to process / get list of columns according to types required\n-----------------------------------------------------------------------\nIF OBJECT_ID('tempdb..#ColumnList') IS NOT NULL\n DROP TABLE tempdb..#ColumnList;\nCREATE TABLE #ColumnList (COLUMN_NAME VARCHAR(128), DATA_TYPE VARCHAR(128), CHARACTER_MAXIMUM_LENGTH INT) -- Used to hold list of columns to process\nIF @ColumnListIN <> '' -- See if there is a list of columns to process\nBEGIN\n -- Process list\n SET @ColumnList = @ColumnListIN + ','\n DECLARE @CharPosition int\n WHILE CHARINDEX(',', @ColumnList) > 0\n  BEGIN\n   SET @CharPosition = CHARINDEX(',', @ColumnList)\n   INSERT INTO #ColumnList (COLUMN_NAME) VALUES (LTRIM(RTRIM(LEFT(@ColumnList, @CharPosition - 1))))\n   SET @ColumnList = STUFF(@ColumnList, 1, @CharPosition, '')\n  END -- While loop\n-- update with datatype and length\n  UPDATE CL\n   SET CL.CHARACTER_MAXIMUM_LENGTH = ISNULL(ISC.CHARACTER_MAXIMUM_LENGTH,0)\n      ,CL.DATA_TYPE = ISC.DATA_TYPE\n   FROM #ColumnList CL\n   INNER JOIN INFORMATION_SCHEMA.COLUMNS ISC\n     ON CL.COLUMN_NAME = ISC.COLUMN_NAME\n  WHERE ISC.TABLE_NAME = @TABLE_NAME\n  AND ISC.TABLE_SCHEMA = @TABLE_SCHEMA\n END\n-- If test for list of column names\nELSE\n BEGIN\n -- Use all column names, to avoid filtering\n  IF @TextCol = 1\n   BEGIN\n    INSERT INTO #ColumnList (COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH)\n     SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS\n     WHERE DATA_TYPE IN ('varchar', 'nvarchar', 'char', 'nchar', 'binary')\n     AND TABLE_NAME = @TABLE_NAME\n     AND TABLE_SCHEMA = @TABLE_SCHEMA\n     AND CHARACTER_MAXIMUM_LENGTH > 0\n   END\n IF @NumCol = 1\n  BEGIN\n   INSERT INTO #ColumnList (COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH)\n   SELECT COLUMN_NAME, DATA_TYPE, ISNULL(CHARACTER_MAXIMUM_LENGTH,0) FROM INFORMATION_SCHEMA.COLUMNS\n   WHERE DATA_TYPE IN ('numeric', 'int', 'bigint', 'tinyint', 'smallint', 'decimal', 'money', 'smallmoney', 'float','real')\n   AND TABLE_NAME = @TABLE_NAME\n   AND TABLE_SCHEMA = @TABLE_SCHEMA\n  END\n IF @DateCol = 1\n  BEGIN\n   INSERT INTO #ColumnList (COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH)\n   SELECT COLUMN_NAME, DATA_TYPE, ISNULL(CHARACTER_MAXIMUM_LENGTH,0) FROM INFORMATION_SCHEMA.COLUMNS\n   WHERE DATA_TYPE IN ('Date', 'DateTime', 'SmallDateTime', 'DateTime2', 'time')\n   AND TABLE_NAME = @TABLE_NAME\n   AND TABLE_SCHEMA = @TABLE_SCHEMA\n  END\nIF @LOBCol = 1\n BEGIN\n  INSERT INTO #ColumnList (COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH)\n   SELECT COLUMN_NAME, DATA_TYPE, CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS\n   WHERE DATA_TYPE IN ('varchar', 'nvarchar', 'varbinary', 'xml')\n   AND TABLE_NAME = @TABLE_NAME\n   AND TABLE_SCHEMA = @TABLE_SCHEMA\n   AND CHARACTER_MAXIMUM_LENGTH = -1\n END\nEND\n-- Else test to get all column names\n-----------------------------------------------------------------------\n-- Test that there are columns to analyse\nSELECT @ColumnCheck = COUNT (*) FROM #ColumnList WHERE DATA_TYPE IS NOT NULL\nIF @ColumnCheck = 0\n BEGIN\n  RAISERROR('The columns do not exist in the selected database or no columns are selected',16,1)\n  RETURN\n END\n-----------------------------------------------------------------------\n-- Create Temp table used to hold profiling data\n-----------------------------------------------------------------------\nIF OBJECT_ID('tempdb..#ProfileData') IS NOT NULL\n DROP TABLE tempdb..#ProfileData;\n CREATE TABLE #ProfileData\n (\n  TABLE_SCHEMA NVARCHAR(128),\n  TABLE_NAME NVARCHAR(128),\n  COLUMN_NAME NVARCHAR(128),\n  ColumnDataLength INT,\n  DataType VARCHAR(128),\n  MinDataLength BIGINT,\n  MaxDataLength BIGINT,\n  AvgDataLength BIGINT,\n  MinDate SQL_VARIANT,\n  MaxDate SQL_VARIANT,\n  NoDistinct BIGINT,\n  NoNulls NUMERIC(32,4),\n  NoZeroLength NUMERIC(32,4),\n  PercentageNulls NUMERIC(9,4),\n  PercentageZeroLength NUMERIC(9,4),\n  NoDateWithHourminuteSecond BIGINT NULL,\n  NoDateWithSecond BIGINT NULL,\n  NoIsNumeric BIGINT NULL,\n  NoIsDate BIGINT NULL,\n  NoAtLimit BIGINT NULL,\n  IsFK BIT NULL DEFAULT 0,\n  DataTypeComments NVARCHAR(1500)\n );\n-- Get row count\nDECLARE @ROWCOUNTTEXT NVARCHAR(1000) = ''\nDECLARE @ROWCOUNTPARAM NVARCHAR(50) = ''\nSET @ROWCOUNTTEXT = 'SELECT @ROWCOUNTOUT = COUNT (*) FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WITH (NOLOCK)'\nSET @ROWCOUNTPARAM = '@ROWCOUNTOUT INT OUTPUT'\nEXECUTE sp_executesql @ROWCOUNTTEXT, @ROWCOUNTPARAM, @ROWCOUNTOUT = @ROWCOUNT OUTPUT\n-----------------------------------------------------------------------\n-- Test that there are records to analyse\nIF @ROWCOUNT = 0\n BEGIN\n  RAISERROR('There is no data in the table to analyse',16,1)\n  RETURN\n END\n-----------------------------------------------------------------------\n-- Define the dynamic SQL used for each column to analyse\n-----------------------------------------------------------------------\nSET @SQLMETADATA = 'INSERT INTO #ProfileData (ColumnDataLength,COLUMN_NAME,TABLE_SCHEMA,TABLE_NAME,DataType,MaxDataLength,MinDataLength,AvgDataLength,MaxDate,MinDate,NoDateWithHourminuteSecond,NoDateWithSecond,NoIsNumeric,NoIsDate,NoNulls,NoZeroLength,NoDistinct)'\nDECLARE SQLMETADATA_CUR CURSOR LOCAL FAST_FORWARD FOR \n SELECT COLUMN_NAME, CHARACTER_MAXIMUM_LENGTH, DATA_TYPE FROM #ColumnList\nOPEN SQLMETADATA_CUR \nFETCH NEXT FROM SQLMETADATA_CUR INTO @COLUMN_NAME, @CHARACTER_MAXIMUM_LENGTH, @DATA_TYPE \nWHILE @@FETCH_STATUS = 0 \n BEGIN \n  SET @SQLMETADATA = @SQLMETADATA +'\n  SELECT TOP 100 PERCENT ' + CAST(@CHARACTER_MAXIMUM_LENGTH AS VARCHAR(20)) + ' ,''' + QUOTENAME(@COLUMN_NAME) + '''\n  ,''' + QUOTENAME(@TABLE_SCHEMA) + '''\n  ,''' + QUOTENAME(@TABLE_NAME) + '''\n  ,''' + @DATA_TYPE + ''''\n   + CASE\n      WHEN @DATA_TYPE IN ('varchar', 'nvarchar', 'char', 'nchar') \n   AND @CHARACTER_MAXIMUM_LENGTH >= 0 \n     THEN + '\n  , MAX(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  , MIN(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  , AVG(LEN(' + QUOTENAME(@COLUMN_NAME) + '))\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,(SELECT COUNT (*) from '\n   + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE ISNUMERIC(' + QUOTENAME(@COLUMN_NAME) + ') = 1) \n  ,(SELECT COUNT (*) from ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE ISDATE(' + QUOTENAME(@COLUMN_NAME) + ') = 1) '\n  WHEN @DATA_TYPE IN ('numeric', 'int', 'bigint', 'tinyint', 'smallint', 'decimal', 'money', 'smallmoney', 'float','real') THEN + '\n  ,MAX(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,AVG(CAST(' + QUOTENAME(@COLUMN_NAME) + ' AS NUMERIC(36,2)))\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('DateTime', 'SmallDateTime') THEN + '\n  ,NULL \n  ,NULL \n  ,NULL \n  ,MAX(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN(' + QUOTENAME(@COLUMN_NAME) + ')\n  ,(SELECT COUNT (*) from ' \n   + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE (CONVERT(NUMERIC(20,12), ' + QUOTENAME(@COLUMN_NAME) + ' ) - FLOOR(CONVERT(NUMERIC(20,12), ' + QUOTENAME(@COLUMN_NAME) + ')) <> 0))\n  ,(SELECT COUNT (*) from '\n   + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE DATEPART(ss,' + QUOTENAME(@COLUMN_NAME) + ') <> 0 OR DATEPART(mcs,' + QUOTENAME(@COLUMN_NAME) + ') <> 0) \n  ,NULL \n  ,NULL '\n    WHEN @DATA_TYPE IN ('DateTime2') THEN + '\n  ,NULL \n  ,NULL \n  ,NULL \n  ,MAX(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN(' + QUOTENAME(@COLUMN_NAME) + ')\n  ,NULL\n  ,NULL\n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('Date') THEN + '\n  ,NULL \n  ,NULL \n  ,NULL \n  ,MAX('\n   + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN('\n  + QUOTENAME(@COLUMN_NAME) + ')\n  ,NULL \n  ,NLL \n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('xml') THEN + '\n  ,MAX(LEN(CAST(' + QUOTENAME(@COLUMN_NAME) + ' AS NVARCHAR(MAX)))) \n  ,MIN(LEN(CAST(' + QUOTENAME(@COLUMN_NAME) + ' AS NVARCHAR(MAX)))) \n  ,AVG(LEN(CAST(' + QUOTENAME(@COLUMN_NAME) + ' AS NVARCHAR(MAX)))) \n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n  WHEN @DATA_TYPE IN ('varbinary','varchar','nvarchar') AND  @CHARACTER_MAXIMUM_LENGTH = -1 THEN + '\n  ,MAX(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  ,MIN(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  ,AVG(LEN(' + QUOTENAME(@COLUMN_NAME) + '))\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('binary') THEN + '\n  ,MAX(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  ,MIN(LEN(' + QUOTENAME(@COLUMN_NAME) + ')) \n  ,AVG(LEN(' + QUOTENAME(@COLUMN_NAME) + '))\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n   WHEN @DATA_TYPE IN ('time') THEN + '\n  ,NULL \n  ,NULL \n  ,NULL \n  ,MAX(' + QUOTENAME(@COLUMN_NAME) + ') \n  ,MIN(' + QUOTENAME(@COLUMN_NAME) + ')\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n   ELSE + '\n  ,NULL \n  ,NULL\n  ,NULL\n  ,NULL\n  ,NULL\n  ,NULL \n  ,NULL \n  ,NULL \n  ,NULL '\n  END + '\n  ,(SELECT COUNT(*) FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE ' + QUOTENAME(@COLUMN_NAME) + ' IS NULL)'\n   + CASE\n   WHEN @DATA_TYPE IN ('varchar', 'nvarchar', 'char', 'nchar') THEN + '\n  ,(SELECT COUNT(*) FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) +  ' WHERE LEN(LTRIM(RTRIM(' + QUOTENAME(@COLUMN_NAME) + '))) = '''')'\n   ELSE + '\n  ,NULL'\n   END + '\n  ,(SELECT COUNT(DISTINCT ' + QUOTENAME(@COLUMN_NAME) + ') FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WHERE ' + QUOTENAME(@COLUMN_NAME) + ' IS NOT NULL )\n  FROM ' + QUOTENAME(@TABLE_SCHEMA) + '.' + QUOTENAME(@TABLE_NAME) + ' WITH (NOLOCK)\n  UNION'\n FETCH NEXT FROM SQLMETADATA_CUR INTO @COLUMN_NAME, @CHARACTER_MAXIMUM_LENGTH, @DATA_TYPE \nEND \nCLOSE SQLMETADATA_CUR \nDEALLOCATE SQLMETADATA_CUR \nSET @SQLMETADATA = LEFT(@SQLMETADATA, LEN(@SQLMETADATA) -5)\nEXEC (@SQLMETADATA)\n-----------------------------------------------------------------------\n-- Final Calculations\n-----------------------------------------------------------------------\n-- Indicate Foreign Keys\n; WITH FK_CTE (FKColumnName)\nAS\n(\n SELECT\n   DISTINCT CU.COLUMN_NAME\n  FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC\n   INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CU\n     ON TC.CONSTRAINT_NAME = CU.CONSTRAINT_NAME \n     AND TC.TABLE_SCHEMA = CU.TABLE_SCHEMA \n     AND TC.TABLE_NAME = CU.TABLE_NAME\n     AND TC.TABLE_SCHEMA = @TABLE_SCHEMA\n     AND TC.TABLE_NAME = @TABLE_NAME\n     AND CONSTRAINT_TYPE = 'FOREIGN KEY'\n)\nUPDATE P\n SET P.IsFK = 1\n FROM #ProfileData P\n  INNER JOIN FK_CTE CTE\n   ON P.COLUMN_NAME = CTE.FKColumnName\n-- Calculate percentages\nUPDATE #ProfileData\n SET PercentageNulls = (NoNulls / @ROWCOUNT) * 100\n    ,PercentageZeroLength = (NoZeroLength / @ROWCOUNT) * 100\n-- Add any comments\n-- Datatype suggestions\n-- First get number of records where a variation could be an anomaly\nSET @DataTypeVariance = ROUND((@ROWCOUNT * @DataTypePercentage) / 100, 0)\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be one of the DATE types. '\n WHERE NoIsDate BETWEEN (@ROWCOUNT -@DataTypeVariance) AND (@ROWCOUNT + @DataTypeVariance)\n AND DataType IN ('varchar', 'nvarchar', 'char', 'nchar')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be one of the NUMERIC types. '\n WHERE NoIsNumeric BETWEEN (@ROWCOUNT -@DataTypeVariance) AND (@ROWCOUNT + @DataTypeVariance)\n AND DataType IN ('varchar', 'nvarchar', 'char', 'nchar')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be INT type. '\n WHERE MinDataLength >= -2147483648\n AND MaxDataLength <= 2147483648\n AND DataType IN ('bigint')\n \nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be SMALLINT type. '\n WHERE MinDataLength >= -32768\n AND MaxDataLength <= 32767\n AND DataType IN ('bigint','int')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be TINYINT type. '\n WHERE MinDataLength >= 0\n AND MaxDataLength <= 255\n AND DataType IN ('bigint','int','smallint')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be SMALLDATE type. '\n WHERE NoDateWithSecond = 0\n AND MinDate >= '19000101'\n AND MaxDate <= '20790606'\n AND DataType IN ('datetime','datetime2')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be DATE type (SQL Server 2008 only). '\n WHERE NoDateWithHourminuteSecond = 0\n AND DataType IN ('datetime','datetime2')\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly could be DATETIME type. '\n WHERE MinDate >= '17530101'\n AND MaxDate <= '99991231'\n AND DataType IN ('datetime2')\n-- Empty column suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = ISNULL(DataTypeComments,'') + 'Seems empty - is it required? '\n WHERE (PercentageNulls = 100 OR PercentageZeroLength = 100)\n AND IsFK = 0\n-- Null column suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = ISNULL(DataTypeComments,'') + 'There is a large percentage of NULLs - attention may be required. '\n WHERE PercentageNulls >= @NullBoundaryPercent\n-- Distinct value suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = ISNULL(DataTypeComments,'') + 'Few distinct elements - potential for reference/lookup table (contains NULLs).'\n WHERE NoDistinct < @DistinctValuesMinimum\n AND @ROWCOUNT > @DistinctValuesMinimum\n AND IsFK = 0\n AND PercentageNulls <> 100\n AND NoNulls <> 0\n-- FK suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = ISNULL(DataTypeComments,'') + 'Few distinct elements - potential for Foreign Key.'\n WHERE NoDistinct < @DistinctValuesMinimum\n AND @ROWCOUNT > @DistinctValuesMinimum\n AND IsFK = 0\n AND NoNulls = 0\n AND DataType NOT LIKE '%Date%'\n AND DataType <> 'Time'\n-- Filestream suggestions\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly a good candidate for FILESTREAM (SQL Server 2008 only).'\n WHERE AvgDataLength >= 1000000\n AND DataType IN ('varbinary')\n AND ColumnDataLength = -1\nUPDATE #ProfileData\n  SET DataTypeComments = 'Possibly not a good candidate for FILESTREAM (SQL Server 2008 only).'\n WHERE AvgDataLength < 1000000\n AND DataType IN ('varbinary')\n AND ColumnDataLength = -1\n-- Sparse Column Suggestions\nIF OBJECT_ID('tempdb..#SparseThresholds') IS NOT NULL\n  DROP TABLE tempdb..#SparseThresholds;\n  CREATE TABLE #SparseThresholds (DataType VARCHAR(128), Threshold NUMERIC(9,4))\n  INSERT INTO #SparseThresholds (DataType, Threshold)\n   VALUES \n    ('tinyint',86),\n    ('smallint',76),    \n    ('int',64),    \n    ('bigint',52),    \n    ('real',64),    \n    ('float',52),    \n    ('money',64),    \n    ('smallmoney',64),    \n    ('smalldatetime',52),    \n    ('datetime',52),    \n    ('uniqueidentifier',43),    \n    ('date',69),    \n    ('datetime2',52),    \n    ('decimal',42),    \n    ('nuumeric',42),    \n    ('char',60),    \n    ('varchar',60),    \n    ('nchar',60),    \n    ('nvarchar',60),    \n    ('binary',60),    \n    ('varbinary',60),    \n    ('xml',60)    \n; WITH Sparse_CTE (COLUMN_NAME, SparseComment)\nAS\n(\nSELECT\n  P.COLUMN_NAME\n ,CASE\n  WHEN P.PercentageNulls >= T.Threshold THEN 'Could benefit from sparse columns. '\n  ELSE ''\n  END AS SparseComment\nFROM #ProfileData P\n INNER JOIN #SparseThresholds T\n  ON P.DataType = T.DataType\n)\nUPDATE PT\n  SET PT.DataTypeComments = \n      CASE WHEN PT.DataTypeComments IS NULL THEN CTE.SparseComment\n           ELSE ISNULL(PT.DataTypeComments,'') + CTE.SparseComment + '. '\n      END\n FROM #ProfileData PT\n  INNER JOIN Sparse_CTE CTE\n   ON PT.COLUMN_NAME = CTE.COLUMN_NAME\n-----------------------------------------------------------------------\n-- Optional advanced analysis\n-----------------------------------------------------------------------\nIF @AdvancedAnalysis = 1\n BEGIN\n-----------------------------------------------------------------------\n-- Data at data boundaries\n-----------------------------------------------------------------------\n  IF OBJECT_ID('tempdb..#LimitTest') IS NOT NULL\n    DROP TABLE tempdb..#LimitTest;\n    CREATE TABLE #LimitTest (COLUMN_NAME VARCHAR(128), NoAtLimit BIGINT);\n    DECLARE @advancedtestSQL VARCHAR(MAX) = 'INSERT INTO #LimitTest (COLUMN_NAME, NoAtLimit)' + CHAR(13)\n    SELECT @advancedtestSQL = @advancedtestSQL + 'SELECT '''+ COLUMN_NAME + ''', COUNT('+ COLUMN_NAME + ') FROM ' + @TABLE_SCHEMA + '.' + @TABLE_NAME + \n     CASE\n       WHEN DataType IN ('numeric', 'int', 'bigint', 'tinyint', 'smallint', 'decimal', 'money', 'smallmoney', 'float','real') THEN ' WHERE '+ COLUMN_NAME + ' = ' + CAST(ISNULL(MaxDataLength,0) AS VARCHAR(40)) + ' OR '+ COLUMN_NAME + ' = ' + CAST(ISNULL(MinDataLength,0) AS VARCHAR(40)) + CHAR(13) + ' UNION' + CHAR(13)\n       ELSE ' WHERE LEN('+ COLUMN_NAME + ') = ' + CAST(ISNULL(MaxDataLength,0) AS VARCHAR(40)) + ' OR LEN('+ COLUMN_NAME + ') = ' + CAST(ISNULL(MinDataLength,0) AS VARCHAR(40)) + CHAR(13) + ' UNION' + CHAR(13)\n     END\n    FROM #ProfileData \n    WHERE DataType IN ('numeric', 'int', 'bigint', 'tinyint', 'smallint', 'decimal', 'money', 'smallmoney', 'float','real','varchar', 'nvarchar', 'char', 'nchar', 'binary')\n    SET @advancedtestSQL = LEFT(@advancedtestSQL,LEN(@advancedtestSQL) -6) \n    EXEC (@advancedtestSQL)\n    UPDATE M\n      SET M.NoAtLimit = T.NoAtLimit\n         ,M.DataTypeComments = \n           CASE\n             WHEN CAST(T.NoAtLimit AS NUMERIC(36,2)) / CAST(@ROWCOUNT AS NUMERIC(36,2)) >= @BoundaryPercent THEN ISNULL(M.DataTypeComments,'') + 'Large numbers of data elements at the max/minvalues. '\n             ELSE M.DataTypeComments\n           END\n    FROM #ProfileData M\n     INNER JOIN #LimitTest T\n      ON M.COLUMN_NAME = T.COLUMN_NAME\n   -----------------------------------------------------------------------\n   -- Domain analysis\n   -----------------------------------------------------------------------\n   IF OBJECT_ID('tempdb..#DomainAnalysis') IS NOT NULL\n     DROP TABLE tempdb..#DomainAnalysis;\n   CREATE TABLE #DomainAnalysis\n   (\n    DomainName NVARCHAR(128)\n   ,DomainElement NVARCHAR(4000)\n   ,DomainCounter BIGINT\n   ,DomainPercent NUMERIC(7,4)\n   );\n   DECLARE @DOMAINSQL VARCHAR(MAX) = 'INSERT INTO #DomainAnalysis (DomainName, DomainElement, DomainCounter) '\n   DECLARE SQLDOMAIN_CUR CURSOR LOCAL FAST_FORWARD FOR \n     SELECT COLUMN_NAME, DataType \n  FROM #ProfileData \n   WHERE NoDistinct < @DistinctValuesMinimum\n   OPEN SQLDOMAIN_CUR \n   FETCH NEXT FROM SQLDOMAIN_CUR INTO @COLUMN_NAME, @DATA_TYPE \n   WHILE @@FETCH_STATUS = 0 \n    BEGIN \n     SET @DOMAINSQL = @DOMAINSQL + 'SELECT ''' + @COLUMN_NAME + ''' AS DomainName, CAST( '+ @COLUMN_NAME + ' AS VARCHAR(4000)) AS DomainElement, COUNT(ISNULL(CAST(' + @COLUMN_NAME + ' AS NVARCHAR(MAX)),'''')) AS DomainCounter FROM ' + @TABLE_SCHEMA + '.' + @TABLE_NAME + ' GROUP BY ' + @COLUMN_NAME + ''\n     + ' UNION '\n     FETCH NEXT FROM SQLDOMAIN_CUR INTO @COLUMN_NAME, @DATA_TYPE \n   END \n  CLOSE SQLDOMAIN_CUR \n  DEALLOCATE SQLDOMAIN_CUR \n  SET @DOMAINSQL = LEFT(@DOMAINSQL, LEN(@DOMAINSQL) -5) + ' ORDER BY DomainName ASC, DomainCounter DESC '\n   EXEC (@DOMAINSQL)\n   -- Now calculate percentages (this appraoch is faster than doing it when performing the domain analysis)\n   ; WITH DomainCounter_CTE (DomainName, DomainCounterTotal)\n   AS\n  (\n   SELECT DomainName, SUM(ISNULL(DomainCounter,0)) AS DomainCounterTotal\n    FROM #DomainAnalysis \n    GROUP BY DomainName\n  )\n  UPDATE D\n    SET D.DomainPercent = (CAST(D.DomainCounter AS NUMERIC(36,4)) / CAST(CTE.DomainCounterTotal AS NUMERIC(36,4))) * 100\n   FROM #DomainAnalysis D\n    INNER JOIN DomainCounter_CTE CTE\n     ON D.DomainName = CTE.DomainName\n   WHERE D.DomainCounter <> 0\n END\n-- Advanced analysis\n-----------------------------------------------------------------------\n-- Output results from the profile and domain data tables\n-----------------------------------------------------------------------\nselect\n   *\n from #ProfileData\nIF @AdvancedAnalysis = 1\n BEGIN\n  select\n    *\n   from #DomainAnalysis\n END\nEND TRY\nBEGIN CATCH\n SELECT\n  ERROR_NUMBER() AS ErrorNumber\n ,ERROR_SEVERITY() AS ErrorSeverity\n ,ERROR_STATE() AS ErrorState\n ,ERROR_PROCEDURE() AS ErrorProcedure\n ,ERROR_LINE() AS ErrorLine\n ,ERROR_MESSAGE() AS ErrorMessage;\n \nEND CATCH",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "fno",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}